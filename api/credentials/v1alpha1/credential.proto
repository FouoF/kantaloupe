syntax = "proto3";

package kantaloupe.dynamia.ai.api.credentials.v1alpha1;

option go_package = "github.com/dynamia-ai/kantaloupe/api/credentials/v1alpha1";

import "api/types/objectmeta.proto";
import "api/types/page.proto";

// CredentialType represents the type of credential.
enum CredentialType {
    // The credential type is unspecified.
    CREDENTIAL_TYPE_UNSPECIFIED = 0;

    // Docker registry credential type.
    DOCKER_REGISTRY = 1;

    // Access key credential type.
    ACCESS_KEY = 2;
}

// CredentialSpec describes a credential's configuration.
message CredentialSpec {
    // Type represents the type of credential.
    CredentialType type = 1;

    // Data contains the credential-specific data.
    // For DOCKER_REGISTRY: server, username, password
    // For ACCESS_KEY: accessKey, secretKey
    map<string, string> data = 2;
}

// Credential represents a credential resource.
message Credential {
    // Standard object's metadata.
    kantaloupe.dynamia.ai.api.types.ObjectMeta metadata = 1;

    // Spec defines the credential configuration.
    CredentialSpec spec = 2;
}

// CredentialResponse represents a credential response without sensitive data.
message CredentialResponse {
    // Name is the credential name.
    string name = 1;

    // Type is the credential type.
    CredentialType type = 2;

    // Namespace where the credential is located.
    string namespace = 3;

    // CreatedTime is the creation timestamp.
    int64 created_time = 4;

    // Labels attached to the credential.
    map<string, string> labels = 5;
}

// ListCredentialsRequest defines a request for listing credentials.
message ListCredentialsRequest {
    // Type represents the credential type filter.
    CredentialType type = 1;

    // Optional namespace to filter credentials.
    // If empty, credentials from all namespaces will be returned.
    string namespace = 2;

    // Page requested.
    int32 page = 3;

    // Size per page requested.
    int32 page_size = 4;

    // Cluster is the cluster name to query.
    // If empty, the local cluster will be used.
    string cluster = 5;
}

// ListCredentialsResponse defines a response for listing credentials.
message ListCredentialsResponse {
    // Items contains the list of credentials.
    repeated CredentialResponse items = 1;

    // Pagination returned contains current page, size, and total.
    kantaloupe.dynamia.ai.api.types.Pagination pagination = 2;
}

// DeleteCredentialRequest defines a request for deleting a credential.
message DeleteCredentialRequest {
    // Name is the user-specified identifier.
    string name = 1;

    // Optional namespace to specify where to delete the credential.
    // If empty, the default namespace will be used.
    string namespace = 2;

    // Cluster is the cluster name where the credential is located.
    // If empty, the local cluster will be used.
    string cluster = 3;
}

// CreateCredentialRequest defines a request for creating a credential.
message CreateCredentialRequest {
    // Name is the user-specified identifier for the credential.
    string name = 1;

    // Namespace to create the credential in.
    // If empty, the default namespace will be used.
    string namespace = 2;

    // Cluster is the cluster name where the credential should be created.
    // If empty, the local cluster will be used.
    string cluster = 3;

    // Type indicates the type of credential being created.
    CredentialType type = 4;

    // Data contains the credential-specific data.
    // For DOCKER_REGISTRY:
    // - required: server, username, password
    // For ACCESS_KEY:
    // - required: accessKey, secretKey
    map<string, string> data = 5;
}

// UpdateCredentialRequest defines a request for updating a credential.
message UpdateCredentialRequest {
    // Name is the user-specified identifier of the credential to update.
    string name = 1;

    // Namespace where the credential is located.
    // If empty, the default namespace will be used.
    string namespace = 2;

    // Cluster is the cluster name where the credential is located.
    // If empty, the local cluster will be used.
    string cluster = 3;

    // Type indicates the type of credential being updated.
    CredentialType type = 4;

    // Data contains the updated credential-specific data.
    // For DOCKER_REGISTRY:
    // - required: server, username, password
    // For ACCESS_KEY:
    // - required: accessKey, secretKey
    map<string, string> data = 5;
}