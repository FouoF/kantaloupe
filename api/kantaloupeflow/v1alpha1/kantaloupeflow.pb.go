// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: api/kantaloupeflow/v1alpha1/kantaloupeflow.proto

package v1alpha1

import (
	types "github.com/dynamia-ai/kantaloupe/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PluginType int32

const (
	// This is only a meaningless placeholder, to avoid zero not return.
	PluginType_PLUGIN_TYPE_UNSPECIFIED PluginType = 0
	PluginType_ssh                     PluginType = 1
	PluginType_vscode                  PluginType = 2
	PluginType_jupyter                 PluginType = 3
)

// Enum value maps for PluginType.
var (
	PluginType_name = map[int32]string{
		0: "PLUGIN_TYPE_UNSPECIFIED",
		1: "ssh",
		2: "vscode",
		3: "jupyter",
	}
	PluginType_value = map[string]int32{
		"PLUGIN_TYPE_UNSPECIFIED": 0,
		"ssh":                     1,
		"vscode":                  2,
		"jupyter":                 3,
	}
)

func (x PluginType) Enum() *PluginType {
	p := new(PluginType)
	*p = x
	return p
}

func (x PluginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_enumTypes[0].Descriptor()
}

func (PluginType) Type() protoreflect.EnumType {
	return &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_enumTypes[0]
}

func (x PluginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginType.Descriptor instead.
func (PluginType) EnumDescriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{0}
}

type WorkloadType int32

const (
	// This is only a meaningless placeholder, to avoid zero not return.
	WorkloadType_WORKLOAD_TYPE_UNSPECIFIED WorkloadType = 0
	WorkloadType_Pod                       WorkloadType = 1
	WorkloadType_Deployment                WorkloadType = 2
)

// Enum value maps for WorkloadType.
var (
	WorkloadType_name = map[int32]string{
		0: "WORKLOAD_TYPE_UNSPECIFIED",
		1: "Pod",
		2: "Deployment",
	}
	WorkloadType_value = map[string]int32{
		"WORKLOAD_TYPE_UNSPECIFIED": 0,
		"Pod":                       1,
		"Deployment":                2,
	}
)

func (x WorkloadType) Enum() *WorkloadType {
	p := new(WorkloadType)
	*p = x
	return p
}

func (x WorkloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_enumTypes[1].Descriptor()
}

func (WorkloadType) Type() protoreflect.EnumType {
	return &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_enumTypes[1]
}

func (x WorkloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadType.Descriptor instead.
func (WorkloadType) EnumDescriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{1}
}

type KantaloupeflowState int32

const (
	// This is only a meaningless placeholder, to avoid zero not return.
	KantaloupeflowState_KANTALOUPEFLOW_STATE_UNSPECIFIED KantaloupeflowState = 0
	KantaloupeflowState_Unknow                           KantaloupeflowState = 1
	KantaloupeflowState_Progressing                      KantaloupeflowState = 2
	KantaloupeflowState_Running                          KantaloupeflowState = 3
	KantaloupeflowState_Falied                           KantaloupeflowState = 4
)

// Enum value maps for KantaloupeflowState.
var (
	KantaloupeflowState_name = map[int32]string{
		0: "KANTALOUPEFLOW_STATE_UNSPECIFIED",
		1: "Unknow",
		2: "Progressing",
		3: "Running",
		4: "Falied",
	}
	KantaloupeflowState_value = map[string]int32{
		"KANTALOUPEFLOW_STATE_UNSPECIFIED": 0,
		"Unknow":                           1,
		"Progressing":                      2,
		"Running":                          3,
		"Falied":                           4,
	}
)

func (x KantaloupeflowState) Enum() *KantaloupeflowState {
	p := new(KantaloupeflowState)
	*p = x
	return p
}

func (x KantaloupeflowState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KantaloupeflowState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_enumTypes[2].Descriptor()
}

func (KantaloupeflowState) Type() protoreflect.EnumType {
	return &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_enumTypes[2]
}

func (x KantaloupeflowState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KantaloupeflowState.Descriptor instead.
func (KantaloupeflowState) EnumDescriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{2}
}

type Kantaloupeflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	Metadata *types.ObjectMeta     `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *KantaloupeflowSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *KantaloupeflowStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Kantaloupeflow) Reset() {
	*x = Kantaloupeflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kantaloupeflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kantaloupeflow) ProtoMessage() {}

func (x *Kantaloupeflow) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kantaloupeflow.ProtoReflect.Descriptor instead.
func (*Kantaloupeflow) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{0}
}

func (x *Kantaloupeflow) GetMetadata() *types.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Kantaloupeflow) GetSpec() *KantaloupeflowSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Kantaloupeflow) GetStatus() *KantaloupeflowStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type KantaloupeflowSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugins  []PluginType     `protobuf:"varint,1,rep,packed,name=plugins,proto3,enum=kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PluginType" json:"plugins,omitempty"`
	Replicas int32            `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Template *PodTemplateSpec `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	Paused   bool             `protobuf:"varint,4,opt,name=paused,proto3" json:"paused,omitempty"`
	Workload WorkloadType     `protobuf:"varint,5,opt,name=workload,proto3,enum=kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.WorkloadType" json:"workload,omitempty"`
}

func (x *KantaloupeflowSpec) Reset() {
	*x = KantaloupeflowSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KantaloupeflowSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KantaloupeflowSpec) ProtoMessage() {}

func (x *KantaloupeflowSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KantaloupeflowSpec.ProtoReflect.Descriptor instead.
func (*KantaloupeflowSpec) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{1}
}

func (x *KantaloupeflowSpec) GetPlugins() []PluginType {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *KantaloupeflowSpec) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *KantaloupeflowSpec) GetTemplate() *PodTemplateSpec {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *KantaloupeflowSpec) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *KantaloupeflowSpec) GetWorkload() WorkloadType {
	if x != nil {
		return x.Workload
	}
	return WorkloadType_WORKLOAD_TYPE_UNSPECIFIED
}

type KantaloupeflowStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	// +optional
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
	// +optional
	ReadyReplicas int32 `protobuf:"varint,2,opt,name=readyReplicas,proto3" json:"readyReplicas,omitempty"`
	// Network info for jupyter, vscode.
	Networks []*Network `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty"`
	// KantaloupeflowState is kantaloupeflow state.
	State KantaloupeflowState `protobuf:"varint,4,opt,name=state,proto3,enum=kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowState" json:"state,omitempty"`
	// Conditions is an array of current conditions.
	Conditions []*types.Condition `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Gpus using by this kantaloupeflow.
	Gpus []*GPU `protobuf:"bytes,6,rep,name=gpus,proto3" json:"gpus,omitempty"`
}

func (x *KantaloupeflowStatus) Reset() {
	*x = KantaloupeflowStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KantaloupeflowStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KantaloupeflowStatus) ProtoMessage() {}

func (x *KantaloupeflowStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KantaloupeflowStatus.ProtoReflect.Descriptor instead.
func (*KantaloupeflowStatus) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{2}
}

func (x *KantaloupeflowStatus) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *KantaloupeflowStatus) GetReadyReplicas() int32 {
	if x != nil {
		return x.ReadyReplicas
	}
	return 0
}

func (x *KantaloupeflowStatus) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *KantaloupeflowStatus) GetState() KantaloupeflowState {
	if x != nil {
		return x.State
	}
	return KantaloupeflowState_KANTALOUPEFLOW_STATE_UNSPECIFIED
}

func (x *KantaloupeflowStatus) GetConditions() []*types.Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *KantaloupeflowStatus) GetGpus() []*GPU {
	if x != nil {
		return x.Gpus
	}
	return nil
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of network, eg jupyter, vscode.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// URL means the external access address.
	// For exposed ports, url like: 123.123.123.123:31332,
	// For jupyter and vscode, url like: http://103.12.12.12/zestu.io/user-xx/instance-xx/xx
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{3}
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// template is the object that describes the pod that will be created if
// insufficient replicas are detected. Each pod stamped out by the StatefulSet
// will fulfill this Template, but have a unique identity from the rest
// of the StatefulSet.
type PodTemplateSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	Metadata *types.ObjectMeta `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec describes the attributes that a pod is created with.
	Spec *PodSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *PodTemplateSpec) Reset() {
	*x = PodTemplateSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodTemplateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodTemplateSpec) ProtoMessage() {}

func (x *PodTemplateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodTemplateSpec.ProtoReflect.Descriptor instead.
func (*PodTemplateSpec) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{4}
}

func (x *PodTemplateSpec) GetMetadata() *types.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PodTemplateSpec) GetSpec() *PodSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// PodSpec describes the attributes that a pod is created with.
type PodSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of volumes that can be mounted by containers belonging to the pod.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes
	// +optional
	Volumes []*Volume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	// Containers name.
	Containers []*Container `protobuf:"bytes,2,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *PodSpec) Reset() {
	*x = PodSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodSpec) ProtoMessage() {}

func (x *PodSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodSpec.ProtoReflect.Descriptor instead.
func (*PodSpec) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{5}
}

func (x *PodSpec) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *PodSpec) GetContainers() []*Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

// Volume represents a named volume in a pod that may be accessed by any
// container in the pod.
type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// HostPathVolumeSource represents a host path mapped into a pod.
	// Host path volumes do not support ownership management or SELinux
	// relabeling.
	HostPath *HostPathVolumeSource `protobuf:"bytes,2,opt,name=hostPath,proto3" json:"hostPath,omitempty"`
	// EmptyDirVolumeSource represents an empty directory for a pod.
	// Empty directory volumes support ownership management and SELinux
	// relabeling.
	EmptyDir *EmptyDirVolumeSource `protobuf:"bytes,3,opt,name=emptyDir,proto3" json:"emptyDir,omitempty"`
	// SecretVolumeSource adapts a Secret into a volume.
	// The contents of the target Secret's Data field will be presented in a
	// volume as files using the keys in the Data field as the file names. Secret
	// volumes support ownership management and SELinux relabeling.
	Secret *SecretVolumeSource `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	// PersistentVolumeClaimVolumeSource represents a reference to a
	// PersistentVolumeClaim in the same namespace
	PersistentVolumeClaim *PersistentVolumeClaimVolumeSource `protobuf:"bytes,5,opt,name=persistentVolumeClaim,proto3" json:"persistentVolumeClaim,omitempty"`
	// ConfigMapVolumeSource adapts a ConfigMap into a volume.
	//
	// The contents of the target ConfigMap's Data field will be presented in a
	// volume as files using the keys in the Data field as the file names, unless
	// the items element is populated with specific mappings of keys to paths.
	// ConfigMap volumes support ownership management and SELinux relabeling.
	ConfigMap *ConfigMapVolumeSource `protobuf:"bytes,6,opt,name=configMap,proto3" json:"configMap,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{6}
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetHostPath() *HostPathVolumeSource {
	if x != nil {
		return x.HostPath
	}
	return nil
}

func (x *Volume) GetEmptyDir() *EmptyDirVolumeSource {
	if x != nil {
		return x.EmptyDir
	}
	return nil
}

func (x *Volume) GetSecret() *SecretVolumeSource {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *Volume) GetPersistentVolumeClaim() *PersistentVolumeClaimVolumeSource {
	if x != nil {
		return x.PersistentVolumeClaim
	}
	return nil
}

func (x *Volume) GetConfigMap() *ConfigMapVolumeSource {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of Container.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The used image of Container.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// The container command.
	Command    []string `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`
	Args       []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	WorkingDir string   `protobuf:"bytes,5,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	Ports      []*Ports `protobuf:"bytes,6,rep,name=ports,proto3" json:"ports,omitempty"`
	// EnvVar represents an environment variable present in a Container.
	Env []*EnvVar `protobuf:"bytes,7,rep,name=env,proto3" json:"env,omitempty"`
	// Source represents a source for the value of an EnvVar.
	Resources *ResourceRequirements `protobuf:"bytes,8,opt,name=resources,proto3" json:"resources,omitempty"`
	// VolumeMount describes a mounting of a Volume within a container.
	VolumeMounts []*VolumeMount `protobuf:"bytes,9,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,omitempty"`
	// Pull image policy.
	ImagePullPolicy string `protobuf:"bytes,10,opt,name=image_pull_policy,json=imagePullPolicy,proto3" json:"image_pull_policy,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{7}
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Container) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Container) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Container) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *Container) GetPorts() []*Ports {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Container) GetEnv() []*EnvVar {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Container) GetResources() *ResourceRequirements {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Container) GetVolumeMounts() []*VolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

func (x *Container) GetImagePullPolicy() string {
	if x != nil {
		return x.ImagePullPolicy
	}
	return ""
}

// VolumeMount for this container.
type VolumeMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This must match the Name of a Volume.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Mounted read-only if true, read-write otherwise (false or unspecified).
	// Defaults to false.
	// +optional
	ReadOnly bool `protobuf:"varint,2,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
	// Full path to the mount volume path.
	MountPath string `protobuf:"bytes,3,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
	// Path within the volume from which the container's volume should be mounted.
	// Defaults to "" (volume's root).
	// +optional
	SubPath string `protobuf:"bytes,4,opt,name=subPath,proto3" json:"subPath,omitempty"`
	// mountPropagation determines how mounts are propagated from the host
	// to container and the other way around.
	// When not set, MountPropagationNone is used.
	// This field is beta in 1.10.
	// +optional
	MountPropagation string `protobuf:"bytes,5,opt,name=mountPropagation,proto3" json:"mountPropagation,omitempty"`
	// Expanded path within the volume from which the container's volume should be
	// mounted. Behaves similarly to SubPath but environment variable references
	// $(VAR_NAME) are expanded using the container's environment. Defaults to ""
	// (volume's root). SubPathExpr and SubPath are mutually exclusive. +optional
	SubPathExpr string `protobuf:"bytes,6,opt,name=subPathExpr,proto3" json:"subPathExpr,omitempty"`
}

func (x *VolumeMount) Reset() {
	*x = VolumeMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeMount) ProtoMessage() {}

func (x *VolumeMount) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeMount.ProtoReflect.Descriptor instead.
func (*VolumeMount) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{8}
}

func (x *VolumeMount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeMount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *VolumeMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *VolumeMount) GetSubPath() string {
	if x != nil {
		return x.SubPath
	}
	return ""
}

func (x *VolumeMount) GetMountPropagation() string {
	if x != nil {
		return x.MountPropagation
	}
	return ""
}

func (x *VolumeMount) GetSubPathExpr() string {
	if x != nil {
		return x.SubPathExpr
	}
	return ""
}

// Environment variable information.
type EnvVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of EnvVar.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of EnvVar.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EnvVar) Reset() {
	*x = EnvVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVar) ProtoMessage() {}

func (x *EnvVar) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVar.ProtoReflect.Descriptor instead.
func (*EnvVar) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{9}
}

func (x *EnvVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvVar) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Ports are not allowed for ephemeral containers.
// +optional
// +patchMergeKey=containerPort
// +patchStrategy=merge
// +listType=map
// +listMapKey=containerPort
// +listMapKey=protocol
type Ports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ContainerPort connects to a certain container port in a pod.
	ContainerPort int32 `protobuf:"varint,1,opt,name=containerPort,proto3" json:"containerPort,omitempty"`
	// Number of port to expose on the host.
	// If specified, this must be a valid port number, 0 < x < 65536.
	// If HostNetwork is specified, this must match ContainerPort.
	// Most containers do not need this.
	// +optional
	HostPort int32 `protobuf:"varint,2,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
	// named port in a pod must have a unique name. Name for the port that can be
	// referred to by services.
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Protocol for port. Must be UDP, TCP, or SCTP.
	// Defaults to "TCP".
	// +optional
	// +default="TCP"
	Protocol string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *Ports) Reset() {
	*x = Ports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ports) ProtoMessage() {}

func (x *Ports) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ports.ProtoReflect.Descriptor instead.
func (*Ports) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{10}
}

func (x *Ports) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *Ports) GetHostPort() int32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

func (x *Ports) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ports) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

// ResourceList returns a string representation of a resource list in a human
// readable format.
type ResourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cpu is the total pod cpu resource. Unit: m.
	Cpu string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Memory is the total memory resource. Unit: byte.
	Memory string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	// Storage is the total storage resource. Unit: byte.
	Storage string `protobuf:"bytes,3,opt,name=storage,proto3" json:"storage,omitempty"`
	// Resources contains all resources include cpu, memory, storage.
	Resources map[string]string `protobuf:"bytes,4,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResourceList) Reset() {
	*x = ResourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceList) ProtoMessage() {}

func (x *ResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceList.ProtoReflect.Descriptor instead.
func (*ResourceList) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{11}
}

func (x *ResourceList) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *ResourceList) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *ResourceList) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *ResourceList) GetResources() map[string]string {
	if x != nil {
		return x.Resources
	}
	return nil
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limits describes the maximum amount of compute resources allowed.
	// More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// +optional
	Limits *ResourceList `protobuf:"bytes,1,opt,name=limits,proto3" json:"limits,omitempty"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is
	// explicitly specified, otherwise to an implementation-defined value. More
	// info:
	// https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// +optional
	Requests *ResourceList `protobuf:"bytes,2,opt,name=requests,proto3" json:"requests,omitempty"`
}

func (x *ResourceRequirements) Reset() {
	*x = ResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirements) ProtoMessage() {}

func (x *ResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirements.ProtoReflect.Descriptor instead.
func (*ResourceRequirements) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{12}
}

func (x *ResourceRequirements) GetLimits() *ResourceList {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ResourceRequirements) GetRequests() *ResourceList {
	if x != nil {
		return x.Requests
	}
	return nil
}

// HostPathVolumeSource Represents a host path mapped into a pod.
// Host path volumes do not support ownership management or SELinux relabeling.
type HostPathVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of the directory on the host.
	// If the path is a symlink, it will follow the link to the real path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Type for HostPath Volume
	// Defaults to ""
	// +optional
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *HostPathVolumeSource) Reset() {
	*x = HostPathVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostPathVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPathVolumeSource) ProtoMessage() {}

func (x *HostPathVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostPathVolumeSource.ProtoReflect.Descriptor instead.
func (*HostPathVolumeSource) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{13}
}

func (x *HostPathVolumeSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HostPathVolumeSource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Represents an empty directory for a pod.
// Empty directory volumes support ownership management and SELinux relabeling.
type EmptyDirVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What type of storage medium should back this directory.
	// The default is "" which means to use the node's default medium.
	// Must be an empty string (default) or Memory.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	// +optional
	Medium string `protobuf:"bytes,1,opt,name=medium,proto3" json:"medium,omitempty"`
	// Total amount of local storage required for this EmptyDir volume.
	// The size limit is also applicable for memory medium.
	// The maximum usage on memory medium EmptyDir would be the minimum value
	// between the SizeLimit specified here and the sum of memory limits of all
	// containers in a pod. The default is nil which means that the limit is
	// undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
	// +optional
	SizeLimit int64 `protobuf:"varint,2,opt,name=sizeLimit,proto3" json:"sizeLimit,omitempty"`
}

func (x *EmptyDirVolumeSource) Reset() {
	*x = EmptyDirVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyDirVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyDirVolumeSource) ProtoMessage() {}

func (x *EmptyDirVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyDirVolumeSource.ProtoReflect.Descriptor instead.
func (*EmptyDirVolumeSource) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{14}
}

func (x *EmptyDirVolumeSource) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *EmptyDirVolumeSource) GetSizeLimit() int64 {
	if x != nil {
		return x.SizeLimit
	}
	return 0
}

// Adapts a Secret into a volume.
// The contents of the target Secret's Data field will be presented in a volume
// as files using the keys in the Data field as the file names.
// Secret volumes support ownership management and SELinux relabeling.
type SecretVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the secret in the pod's namespace to use.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// +optional
	SecretName string `protobuf:"bytes,1,opt,name=secretName,proto3" json:"secretName,omitempty"`
	// If unspecified, each key-value pair in the Data field of the referenced
	// Secret will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the Secret,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	// +optional
	Items []*KeyToPath `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0
	// and 511. YAML accepts both octal and decimal values, JSON requires decimal
	// values for mode bits. Defaults to 0644. Directories within the path are not
	// affected by this setting. This might be in conflict with other options that
	// affect the file mode, like fsGroup, and the result can be other mode bits
	// set. +optional
	DefaultMode int32 `protobuf:"varint,3,opt,name=defaultMode,proto3" json:"defaultMode,omitempty"`
	// Specify whether the Secret or its keys must be defined
	// +optional
	Optional bool `protobuf:"varint,4,opt,name=optional,proto3" json:"optional,omitempty"`
}

func (x *SecretVolumeSource) Reset() {
	*x = SecretVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretVolumeSource) ProtoMessage() {}

func (x *SecretVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretVolumeSource.ProtoReflect.Descriptor instead.
func (*SecretVolumeSource) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{15}
}

func (x *SecretVolumeSource) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *SecretVolumeSource) GetItems() []*KeyToPath {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SecretVolumeSource) GetDefaultMode() int32 {
	if x != nil {
		return x.DefaultMode
	}
	return 0
}

func (x *SecretVolumeSource) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

// KeyToPath maps a string key to a path within a volume.
type KeyToPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key to project.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Optional: mode bits to use on this file, should be a value between 0
	// and 0777. If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	// +optional
	Mode int32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *KeyToPath) Reset() {
	*x = KeyToPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyToPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyToPath) ProtoMessage() {}

func (x *KeyToPath) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyToPath.ProtoReflect.Descriptor instead.
func (*KeyToPath) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{16}
}

func (x *KeyToPath) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyToPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KeyToPath) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same
// namespace. This volume finds the bound PV and mounts that volume for the pod.
// A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another
// type of volume that is owned by someone else (the system).
type PersistentVolumeClaimVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClaimName is the name of a PersistentVolumeClaim in the same namespace as
	// the pod using this volume. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName string `protobuf:"bytes,1,opt,name=claimName,proto3" json:"claimName,omitempty"`
	// Will force the ReadOnly setting in VolumeMounts.
	// Default false.
	// +optional
	ReadOnly bool `protobuf:"varint,2,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
}

func (x *PersistentVolumeClaimVolumeSource) Reset() {
	*x = PersistentVolumeClaimVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentVolumeClaimVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentVolumeClaimVolumeSource) ProtoMessage() {}

func (x *PersistentVolumeClaimVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentVolumeClaimVolumeSource.ProtoReflect.Descriptor instead.
func (*PersistentVolumeClaimVolumeSource) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{17}
}

func (x *PersistentVolumeClaimVolumeSource) GetClaimName() string {
	if x != nil {
		return x.ClaimName
	}
	return ""
}

func (x *PersistentVolumeClaimVolumeSource) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

// Adapts a ConfigMap into a volume.
//
// The contents of the target ConfigMap's Data field will be presented in a
// volume as files using the keys in the Data field as the file names, unless
// the items element is populated with specific mappings of keys to paths.
// ConfigMap volumes support ownership management and SELinux relabeling.
type ConfigMapVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If unspecified, each key-value pair in the Data field of the referenced
	// ConfigMap will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the ConfigMap,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	// +optional
	Items []*KeyToPath `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0
	// and 511. YAML accepts both octal and decimal values, JSON requires decimal
	// values for mode bits. Defaults to 0644. Directories within the path are not
	// affected by this setting. This might be in conflict with other options that
	// affect the file mode, like fsGroup, and the result can be other mode bits
	// set. +optional
	DefaultMode int32 `protobuf:"varint,3,opt,name=defaultMode,proto3" json:"defaultMode,omitempty"`
	// Specify whether the ConfigMap or its keys must be defined
	// +optional
	Optional bool `protobuf:"varint,4,opt,name=optional,proto3" json:"optional,omitempty"`
}

func (x *ConfigMapVolumeSource) Reset() {
	*x = ConfigMapVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMapVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapVolumeSource) ProtoMessage() {}

func (x *ConfigMapVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapVolumeSource.ProtoReflect.Descriptor instead.
func (*ConfigMapVolumeSource) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{18}
}

func (x *ConfigMapVolumeSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigMapVolumeSource) GetItems() []*KeyToPath {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ConfigMapVolumeSource) GetDefaultMode() int32 {
	if x != nil {
		return x.DefaultMode
	}
	return 0
}

func (x *ConfigMapVolumeSource) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type KantaloupeTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*KantaloupeTreeNode `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *KantaloupeTree) Reset() {
	*x = KantaloupeTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KantaloupeTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KantaloupeTree) ProtoMessage() {}

func (x *KantaloupeTree) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KantaloupeTree.ProtoReflect.Descriptor instead.
func (*KantaloupeTree) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{19}
}

func (x *KantaloupeTree) GetData() []*KantaloupeTreeNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type KantaloupeTreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name represents the cluster name.
	Name     string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value    int32                 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Children []*KantaloupeTreeNode `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *KantaloupeTreeNode) Reset() {
	*x = KantaloupeTreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KantaloupeTreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KantaloupeTreeNode) ProtoMessage() {}

func (x *KantaloupeTreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KantaloupeTreeNode.ProtoReflect.Descriptor instead.
func (*KantaloupeTreeNode) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{20}
}

func (x *KantaloupeTreeNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KantaloupeTreeNode) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *KantaloupeTreeNode) GetChildren() []*KantaloupeTreeNode {
	if x != nil {
		return x.Children
	}
	return nil
}

type CreateKantaloupeflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster string          `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Data    *Kantaloupeflow `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateKantaloupeflowRequest) Reset() {
	*x = CreateKantaloupeflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKantaloupeflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKantaloupeflowRequest) ProtoMessage() {}

func (x *CreateKantaloupeflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKantaloupeflowRequest.ProtoReflect.Descriptor instead.
func (*CreateKantaloupeflowRequest) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{21}
}

func (x *CreateKantaloupeflowRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *CreateKantaloupeflowRequest) GetData() *Kantaloupeflow {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetKantaloupeflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster   string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetKantaloupeflowRequest) Reset() {
	*x = GetKantaloupeflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKantaloupeflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKantaloupeflowRequest) ProtoMessage() {}

func (x *GetKantaloupeflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKantaloupeflowRequest.ProtoReflect.Descriptor instead.
func (*GetKantaloupeflowRequest) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{22}
}

func (x *GetKantaloupeflowRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GetKantaloupeflowRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetKantaloupeflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Get Kantaloupeflow information List.
type ListKantaloupeflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the user-specified identifier.
	// This field may not be updated.
	Name      string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cluster   string              `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace string              `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Status    KantaloupeflowState `protobuf:"varint,4,opt,name=status,proto3,enum=kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowState" json:"status,omitempty"`
	// Page requested.
	Page int32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	// Size per page requested.
	PageSize int32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// SortBy determines the cluster list order reference.
	SortBy types.SortBy `protobuf:"varint,7,opt,name=sort_by,json=sortBy,proto3,enum=kantaloupe.dynamia.ai.api.types.SortBy" json:"sort_by,omitempty"`
	// OrderBy determines the cluster list order.
	SortDir types.SortDir `protobuf:"varint,8,opt,name=sort_dir,json=sortDir,proto3,enum=kantaloupe.dynamia.ai.api.types.SortDir" json:"sort_dir,omitempty"`
}

func (x *ListKantaloupeflowsRequest) Reset() {
	*x = ListKantaloupeflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKantaloupeflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKantaloupeflowsRequest) ProtoMessage() {}

func (x *ListKantaloupeflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKantaloupeflowsRequest.ProtoReflect.Descriptor instead.
func (*ListKantaloupeflowsRequest) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{23}
}

func (x *ListKantaloupeflowsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListKantaloupeflowsRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ListKantaloupeflowsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListKantaloupeflowsRequest) GetStatus() KantaloupeflowState {
	if x != nil {
		return x.Status
	}
	return KantaloupeflowState_KANTALOUPEFLOW_STATE_UNSPECIFIED
}

func (x *ListKantaloupeflowsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListKantaloupeflowsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKantaloupeflowsRequest) GetSortBy() types.SortBy {
	if x != nil {
		return x.SortBy
	}
	return types.SortBy(0)
}

func (x *ListKantaloupeflowsRequest) GetSortDir() types.SortDir {
	if x != nil {
		return x.SortDir
	}
	return types.SortDir(0)
}

// Kantaloupeflows information List.
type ListKantaloupeflowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data The data field is the YAML details
	Items []*Kantaloupeflow `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Pagination returned contains current page, size, and total.
	Pagination *types.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListKantaloupeflowsResponse) Reset() {
	*x = ListKantaloupeflowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKantaloupeflowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKantaloupeflowsResponse) ProtoMessage() {}

func (x *ListKantaloupeflowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKantaloupeflowsResponse.ProtoReflect.Descriptor instead.
func (*ListKantaloupeflowsResponse) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{24}
}

func (x *ListKantaloupeflowsResponse) GetItems() []*Kantaloupeflow {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListKantaloupeflowsResponse) GetPagination() *types.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DeleteKantaloupeflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster   string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteKantaloupeflowRequest) Reset() {
	*x = DeleteKantaloupeflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKantaloupeflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKantaloupeflowRequest) ProtoMessage() {}

func (x *DeleteKantaloupeflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKantaloupeflowRequest.ProtoReflect.Descriptor instead.
func (*DeleteKantaloupeflowRequest) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteKantaloupeflowRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *DeleteKantaloupeflowRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteKantaloupeflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateKantaloupeflowGPUMemoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster   string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Gpumemory int32  `protobuf:"varint,4,opt,name=gpumemory,proto3" json:"gpumemory,omitempty"`
}

func (x *UpdateKantaloupeflowGPUMemoryRequest) Reset() {
	*x = UpdateKantaloupeflowGPUMemoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKantaloupeflowGPUMemoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKantaloupeflowGPUMemoryRequest) ProtoMessage() {}

func (x *UpdateKantaloupeflowGPUMemoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKantaloupeflowGPUMemoryRequest.ProtoReflect.Descriptor instead.
func (*UpdateKantaloupeflowGPUMemoryRequest) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateKantaloupeflowGPUMemoryRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *UpdateKantaloupeflowGPUMemoryRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateKantaloupeflowGPUMemoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateKantaloupeflowGPUMemoryRequest) GetGpumemory() int32 {
	if x != nil {
		return x.Gpumemory
	}
	return 0
}

type GPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Model  string  `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Memory int32   `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	Core   float32 `protobuf:"fixed32,4,opt,name=core,proto3" json:"core,omitempty"`
}

func (x *GPU) Reset() {
	*x = GPU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPU) ProtoMessage() {}

func (x *GPU) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPU.ProtoReflect.Descriptor instead.
func (*GPU) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{27}
}

func (x *GPU) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GPU) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GPU) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *GPU) GetCore() float32 {
	if x != nil {
		return x.Core
	}
	return 0
}

type GetKantaloupeflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kantaloupeflow *Kantaloupeflow `protobuf:"bytes,1,opt,name=kantaloupeflow,proto3" json:"kantaloupeflow,omitempty"`
	Node           string          `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *GetKantaloupeflowResponse) Reset() {
	*x = GetKantaloupeflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKantaloupeflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKantaloupeflowResponse) ProtoMessage() {}

func (x *GetKantaloupeflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKantaloupeflowResponse.ProtoReflect.Descriptor instead.
func (*GetKantaloupeflowResponse) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{28}
}

func (x *GetKantaloupeflowResponse) GetKantaloupeflow() *Kantaloupeflow {
	if x != nil {
		return x.Kantaloupeflow
	}
	return nil
}

func (x *GetKantaloupeflowResponse) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type GetKantaloupeflowConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster   string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetKantaloupeflowConditionsRequest) Reset() {
	*x = GetKantaloupeflowConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKantaloupeflowConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKantaloupeflowConditionsRequest) ProtoMessage() {}

func (x *GetKantaloupeflowConditionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKantaloupeflowConditionsRequest.ProtoReflect.Descriptor instead.
func (*GetKantaloupeflowConditionsRequest) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{29}
}

func (x *GetKantaloupeflowConditionsRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GetKantaloupeflowConditionsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetKantaloupeflowConditionsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ConditionStrings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ConditionStrings) Reset() {
	*x = ConditionStrings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionStrings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionStrings) ProtoMessage() {}

func (x *ConditionStrings) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionStrings.ProtoReflect.Descriptor instead.
func (*ConditionStrings) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{30}
}

func (x *ConditionStrings) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConditionStrings) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ConditionStrings) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetKantaloupeflowConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*ConditionStrings `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *GetKantaloupeflowConditionsResponse) Reset() {
	*x = GetKantaloupeflowConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKantaloupeflowConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKantaloupeflowConditionsResponse) ProtoMessage() {}

func (x *GetKantaloupeflowConditionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKantaloupeflowConditionsResponse.ProtoReflect.Descriptor instead.
func (*GetKantaloupeflowConditionsResponse) Descriptor() ([]byte, []int) {
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP(), []int{31}
}

func (x *GetKantaloupeflowConditionsResponse) GetConditions() []*ConditionStrings {
	if x != nil {
		return x.Conditions
	}
	return nil
}

var File_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto protoreflect.FileDescriptor

var file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDesc = []byte{
	0x0a, 0x30, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x31, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x02, 0x0a, 0x0e, 0x4b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b,
	0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x5f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xde, 0x02, 0x0a, 0x12, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x12, 0x57, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x5e, 0x0a, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x6f, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75,
	0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xa6, 0x03, 0x0a, 0x14, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x56, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x12, 0x5c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b,
	0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75,
	0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a,
	0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75,
	0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x50, 0x55, 0x52, 0x04, 0x67, 0x70, 0x75, 0x73, 0x22, 0x2f, 0x0a, 0x07, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x50,
	0x6f, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x47,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75,
	0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xbc, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x53, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b,
	0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f,
	0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xba, 0x04, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x63, 0x0a, 0x08, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6b,
	0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f,
	0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x12,
	0x5d, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x8a,
	0x01, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x15, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x66, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x61, 0x70, 0x22, 0x99, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x03, 0x65, 0x6e,
	0x76, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x56,
	0x61, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x65, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x63,
	0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75,
	0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c,
	0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0xc3, 0x01, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x45, 0x78,
	0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74,
	0x68, 0x45, 0x78, 0x70, 0x72, 0x22, 0x32, 0x0a, 0x06, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xfe, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x6c, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6b,
	0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f,
	0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x57,
	0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x14, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x4c, 0x0a, 0x14, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x45, 0x0a, 0x09, 0x4b,
	0x65, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x22, 0x5d, 0x0a, 0x21, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x52, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x22, 0x6b, 0x0a, 0x0e, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1,
	0x01, 0x0a, 0x12, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x61, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b,
	0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x03, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f,
	0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x72, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x22, 0xc3,
	0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x90, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x70, 0x75, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x70, 0x75, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x22, 0x5b, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x9a, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a,
	0x0e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75,
	0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x0e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x63, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x4b, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x73, 0x73, 0x68, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72,
	0x10, 0x03, 0x2a, 0x46, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x2a, 0x71, 0x0a, 0x13, 0x4b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x41, 0x4e, 0x54, 0x41, 0x4c, 0x4f, 0x55, 0x50, 0x45, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x6c, 0x69, 0x65, 0x64, 0x10, 0x04, 0x42, 0x3e, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescOnce sync.Once
	file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescData = file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDesc
)

func file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescGZIP() []byte {
	file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescOnce.Do(func() {
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescData)
	})
	return file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDescData
}

var file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_goTypes = []interface{}{
	(PluginType)(0),                              // 0: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PluginType
	(WorkloadType)(0),                            // 1: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.WorkloadType
	(KantaloupeflowState)(0),                     // 2: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowState
	(*Kantaloupeflow)(nil),                       // 3: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Kantaloupeflow
	(*KantaloupeflowSpec)(nil),                   // 4: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowSpec
	(*KantaloupeflowStatus)(nil),                 // 5: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowStatus
	(*Network)(nil),                              // 6: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Network
	(*PodTemplateSpec)(nil),                      // 7: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PodTemplateSpec
	(*PodSpec)(nil),                              // 8: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PodSpec
	(*Volume)(nil),                               // 9: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Volume
	(*Container)(nil),                            // 10: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Container
	(*VolumeMount)(nil),                          // 11: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.VolumeMount
	(*EnvVar)(nil),                               // 12: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.EnvVar
	(*Ports)(nil),                                // 13: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Ports
	(*ResourceList)(nil),                         // 14: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ResourceList
	(*ResourceRequirements)(nil),                 // 15: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ResourceRequirements
	(*HostPathVolumeSource)(nil),                 // 16: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.HostPathVolumeSource
	(*EmptyDirVolumeSource)(nil),                 // 17: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.EmptyDirVolumeSource
	(*SecretVolumeSource)(nil),                   // 18: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.SecretVolumeSource
	(*KeyToPath)(nil),                            // 19: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KeyToPath
	(*PersistentVolumeClaimVolumeSource)(nil),    // 20: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PersistentVolumeClaimVolumeSource
	(*ConfigMapVolumeSource)(nil),                // 21: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ConfigMapVolumeSource
	(*KantaloupeTree)(nil),                       // 22: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeTree
	(*KantaloupeTreeNode)(nil),                   // 23: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeTreeNode
	(*CreateKantaloupeflowRequest)(nil),          // 24: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.CreateKantaloupeflowRequest
	(*GetKantaloupeflowRequest)(nil),             // 25: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.GetKantaloupeflowRequest
	(*ListKantaloupeflowsRequest)(nil),           // 26: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ListKantaloupeflowsRequest
	(*ListKantaloupeflowsResponse)(nil),          // 27: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ListKantaloupeflowsResponse
	(*DeleteKantaloupeflowRequest)(nil),          // 28: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.DeleteKantaloupeflowRequest
	(*UpdateKantaloupeflowGPUMemoryRequest)(nil), // 29: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.UpdateKantaloupeflowGPUMemoryRequest
	(*GPU)(nil),                                  // 30: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.GPU
	(*GetKantaloupeflowResponse)(nil),            // 31: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.GetKantaloupeflowResponse
	(*GetKantaloupeflowConditionsRequest)(nil),   // 32: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.GetKantaloupeflowConditionsRequest
	(*ConditionStrings)(nil),                     // 33: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ConditionStrings
	(*GetKantaloupeflowConditionsResponse)(nil),  // 34: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.GetKantaloupeflowConditionsResponse
	nil,                      // 35: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ResourceList.ResourcesEntry
	(*types.ObjectMeta)(nil), // 36: kantaloupe.dynamia.ai.api.types.ObjectMeta
	(*types.Condition)(nil),  // 37: kantaloupe.dynamia.ai.api.types.Condition
	(types.SortBy)(0),        // 38: kantaloupe.dynamia.ai.api.types.SortBy
	(types.SortDir)(0),       // 39: kantaloupe.dynamia.ai.api.types.SortDir
	(*types.Pagination)(nil), // 40: kantaloupe.dynamia.ai.api.types.Pagination
}
var file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_depIdxs = []int32{
	36, // 0: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Kantaloupeflow.metadata:type_name -> kantaloupe.dynamia.ai.api.types.ObjectMeta
	4,  // 1: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Kantaloupeflow.spec:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowSpec
	5,  // 2: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Kantaloupeflow.status:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowStatus
	0,  // 3: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowSpec.plugins:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PluginType
	7,  // 4: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowSpec.template:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PodTemplateSpec
	1,  // 5: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowSpec.workload:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.WorkloadType
	6,  // 6: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowStatus.networks:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Network
	2,  // 7: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowStatus.state:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowState
	37, // 8: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowStatus.conditions:type_name -> kantaloupe.dynamia.ai.api.types.Condition
	30, // 9: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowStatus.gpus:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.GPU
	36, // 10: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PodTemplateSpec.metadata:type_name -> kantaloupe.dynamia.ai.api.types.ObjectMeta
	8,  // 11: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PodTemplateSpec.spec:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PodSpec
	9,  // 12: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PodSpec.volumes:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Volume
	10, // 13: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PodSpec.containers:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Container
	16, // 14: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Volume.hostPath:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.HostPathVolumeSource
	17, // 15: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Volume.emptyDir:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.EmptyDirVolumeSource
	18, // 16: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Volume.secret:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.SecretVolumeSource
	20, // 17: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Volume.persistentVolumeClaim:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.PersistentVolumeClaimVolumeSource
	21, // 18: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Volume.configMap:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ConfigMapVolumeSource
	13, // 19: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Container.ports:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Ports
	12, // 20: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Container.env:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.EnvVar
	15, // 21: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Container.resources:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ResourceRequirements
	11, // 22: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Container.volume_mounts:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.VolumeMount
	35, // 23: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ResourceList.resources:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ResourceList.ResourcesEntry
	14, // 24: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ResourceRequirements.limits:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ResourceList
	14, // 25: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ResourceRequirements.requests:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ResourceList
	19, // 26: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.SecretVolumeSource.items:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KeyToPath
	19, // 27: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ConfigMapVolumeSource.items:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KeyToPath
	23, // 28: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeTree.data:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeTreeNode
	23, // 29: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeTreeNode.children:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeTreeNode
	3,  // 30: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.CreateKantaloupeflowRequest.data:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Kantaloupeflow
	2,  // 31: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ListKantaloupeflowsRequest.status:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.KantaloupeflowState
	38, // 32: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ListKantaloupeflowsRequest.sort_by:type_name -> kantaloupe.dynamia.ai.api.types.SortBy
	39, // 33: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ListKantaloupeflowsRequest.sort_dir:type_name -> kantaloupe.dynamia.ai.api.types.SortDir
	3,  // 34: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ListKantaloupeflowsResponse.items:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Kantaloupeflow
	40, // 35: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ListKantaloupeflowsResponse.pagination:type_name -> kantaloupe.dynamia.ai.api.types.Pagination
	3,  // 36: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.GetKantaloupeflowResponse.kantaloupeflow:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.Kantaloupeflow
	33, // 37: kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.GetKantaloupeflowConditionsResponse.conditions:type_name -> kantaloupe.dynamia.ai.api.kantaloupeflow.v1alpha1.ConditionStrings
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_init() }
func file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_init() {
	if File_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kantaloupeflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KantaloupeflowSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KantaloupeflowStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodTemplateSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostPathVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyDirVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyToPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentVolumeClaimVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KantaloupeTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KantaloupeTreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKantaloupeflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKantaloupeflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKantaloupeflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKantaloupeflowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKantaloupeflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKantaloupeflowGPUMemoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKantaloupeflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKantaloupeflowConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionStrings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKantaloupeflowConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_goTypes,
		DependencyIndexes: file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_depIdxs,
		EnumInfos:         file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_enumTypes,
		MessageInfos:      file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_msgTypes,
	}.Build()
	File_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto = out.File
	file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_rawDesc = nil
	file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_goTypes = nil
	file_api_kantaloupeflow_v1alpha1_kantaloupeflow_proto_depIdxs = nil
}
