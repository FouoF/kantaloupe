// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: api/clusters/v1alpha1/cluster.proto

package v1alpha1

import (
	types "github.com/dynamia-ai/kantaloupe/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterProvider int32

const (
	// The cluster provider is unspecified.
	ClusterProvider_CLUSTER_PROVIDER_UNSPECIFIED ClusterProvider = 0
	// Generic
	// GENERIC indicates other providers
	ClusterProvider_GENERIC ClusterProvider = 1
	// OverSea Distribtion
	// REDHAT_OPENSHIFT4 indicates a provider of RedHat Openshift4
	ClusterProvider_REDHAT_OPENSHIFT4 ClusterProvider = 2
	// SUSE_RANCHER indicates a provider of SUSE Rancher
	ClusterProvider_SUSE_RANCHER ClusterProvider = 3
	// VMWARE_TANZU indicates a provider of VMware Tanzu
	ClusterProvider_VMWARE_TANZU ClusterProvider = 4
	// Public Cloud
	// AWS_EKS indicates a provider of AWS EKS
	ClusterProvider_AWS_EKS ClusterProvider = 5
	// ALIYUN_ACK indicates a provider of Aliyun ACK
	ClusterProvider_ALIYUN_ACK ClusterProvider = 6
	// TENCENT_TKE indicates a provider of Huawei CCE.
	ClusterProvider_HUAWEI_CCE ClusterProvider = 7
	// GCP_GKE indicates a provider of Google GKE
	ClusterProvider_GCP_GKE ClusterProvider = 8
)

// Enum value maps for ClusterProvider.
var (
	ClusterProvider_name = map[int32]string{
		0: "CLUSTER_PROVIDER_UNSPECIFIED",
		1: "GENERIC",
		2: "REDHAT_OPENSHIFT4",
		3: "SUSE_RANCHER",
		4: "VMWARE_TANZU",
		5: "AWS_EKS",
		6: "ALIYUN_ACK",
		7: "HUAWEI_CCE",
		8: "GCP_GKE",
	}
	ClusterProvider_value = map[string]int32{
		"CLUSTER_PROVIDER_UNSPECIFIED": 0,
		"GENERIC":                      1,
		"REDHAT_OPENSHIFT4":            2,
		"SUSE_RANCHER":                 3,
		"VMWARE_TANZU":                 4,
		"AWS_EKS":                      5,
		"ALIYUN_ACK":                   6,
		"HUAWEI_CCE":                   7,
		"GCP_GKE":                      8,
	}
)

func (x ClusterProvider) Enum() *ClusterProvider {
	p := new(ClusterProvider)
	*p = x
	return p
}

func (x ClusterProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_api_clusters_v1alpha1_cluster_proto_enumTypes[0].Descriptor()
}

func (ClusterProvider) Type() protoreflect.EnumType {
	return &file_api_clusters_v1alpha1_cluster_proto_enumTypes[0]
}

func (x ClusterProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterProvider.Descriptor instead.
func (ClusterProvider) EnumDescriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{0}
}

type ClusterType int32

const (
	// The cluster type is unspecified.
	ClusterType_CLUSTER_TYPE_UNSPECIFIED ClusterType = 0
	// nvidia
	// NVIDIA indicates the cluster type of NVIDIA.
	ClusterType_NVIDIA ClusterType = 1
	// MetaX
	// METAX indicates the cluster type of MetaX.
	ClusterType_METAX ClusterType = 2
	// Cambricon
	// METAX indicates the cluster type of cambricon.
	ClusterType_CAMBRICON ClusterType = 3
	// Moore threads
	// METAX indicates the cluster type of moore threads.
	ClusterType_MOORE_THREADS ClusterType = 4
	// Iluvatar corex
	// Iluvatar corex indicates the cluster type of Iluvatar corex.
	ClusterType_ILUVATAR_COREX ClusterType = 5
	// hygon
	// HYGON corex indicates the cluster type of hygon.
	ClusterType_HYGON ClusterType = 6
	// ascend
	// ASCEND indicates the cluster type of ascend.
	ClusterType_ASCEND ClusterType = 7
	// neuron
	// NEURON indicates the cluster type of aws neuron.
	ClusterType_NEURON ClusterType = 8
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "CLUSTER_TYPE_UNSPECIFIED",
		1: "NVIDIA",
		2: "METAX",
		3: "CAMBRICON",
		4: "MOORE_THREADS",
		5: "ILUVATAR_COREX",
		6: "HYGON",
		7: "ASCEND",
		8: "NEURON",
	}
	ClusterType_value = map[string]int32{
		"CLUSTER_TYPE_UNSPECIFIED": 0,
		"NVIDIA":                   1,
		"METAX":                    2,
		"CAMBRICON":                3,
		"MOORE_THREADS":            4,
		"ILUVATAR_COREX":           5,
		"HYGON":                    6,
		"ASCEND":                   7,
		"NEURON":                   8,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_clusters_v1alpha1_cluster_proto_enumTypes[1].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_api_clusters_v1alpha1_cluster_proto_enumTypes[1]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterType.Descriptor instead.
func (ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{1}
}

type ClusterState int32

const (
	ClusterState_UNSPECIFED ClusterState = 0
	ClusterState_RUNNING    ClusterState = 1
	ClusterState_UNHEALTH   ClusterState = 2
)

// Enum value maps for ClusterState.
var (
	ClusterState_name = map[int32]string{
		0: "UNSPECIFED",
		1: "RUNNING",
		2: "UNHEALTH",
	}
	ClusterState_value = map[string]int32{
		"UNSPECIFED": 0,
		"RUNNING":    1,
		"UNHEALTH":   2,
	}
)

func (x ClusterState) Enum() *ClusterState {
	p := new(ClusterState)
	*p = x
	return p
}

func (x ClusterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_clusters_v1alpha1_cluster_proto_enumTypes[2].Descriptor()
}

func (ClusterState) Type() protoreflect.EnumType {
	return &file_api_clusters_v1alpha1_cluster_proto_enumTypes[2]
}

func (x ClusterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterState.Descriptor instead.
func (ClusterState) EnumDescriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{2}
}

type RankOption int32

const (
	// RANK_OPTION_UNSPECIFIED represents the default rank option rank by total.
	RankOption_RANK_OPTION_UNSPECIFIED RankOption = 0
	// RANK_OPTION_MEM_ALLOCATED represents the rank option rank by mem_allocated.
	RankOption_RANK_OPTION_MEMORY RankOption = 1
	// RANK_OPTION_CORE represents the rank option rank by core_allocated.
	RankOption_RANK_OPTION_CORE RankOption = 2
)

// Enum value maps for RankOption.
var (
	RankOption_name = map[int32]string{
		0: "RANK_OPTION_UNSPECIFIED",
		1: "RANK_OPTION_MEMORY",
		2: "RANK_OPTION_CORE",
	}
	RankOption_value = map[string]int32{
		"RANK_OPTION_UNSPECIFIED": 0,
		"RANK_OPTION_MEMORY":      1,
		"RANK_OPTION_CORE":        2,
	}
)

func (x RankOption) Enum() *RankOption {
	p := new(RankOption)
	*p = x
	return p
}

func (x RankOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RankOption) Descriptor() protoreflect.EnumDescriptor {
	return file_api_clusters_v1alpha1_cluster_proto_enumTypes[3].Descriptor()
}

func (RankOption) Type() protoreflect.EnumType {
	return &file_api_clusters_v1alpha1_cluster_proto_enumTypes[3]
}

func (x RankOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RankOption.Descriptor instead.
func (RankOption) EnumDescriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{3}
}

type KantaloupePluginName int32

const (
	KantaloupePluginName_KANTALOUPE_PLUGIN_NAME_UNSPECIFED KantaloupePluginName = 0
	KantaloupePluginName_HAMI                              KantaloupePluginName = 1
)

// Enum value maps for KantaloupePluginName.
var (
	KantaloupePluginName_name = map[int32]string{
		0: "KANTALOUPE_PLUGIN_NAME_UNSPECIFED",
		1: "HAMI",
	}
	KantaloupePluginName_value = map[string]int32{
		"KANTALOUPE_PLUGIN_NAME_UNSPECIFED": 0,
		"HAMI":                              1,
	}
)

func (x KantaloupePluginName) Enum() *KantaloupePluginName {
	p := new(KantaloupePluginName)
	*p = x
	return p
}

func (x KantaloupePluginName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KantaloupePluginName) Descriptor() protoreflect.EnumDescriptor {
	return file_api_clusters_v1alpha1_cluster_proto_enumTypes[4].Descriptor()
}

func (KantaloupePluginName) Type() protoreflect.EnumType {
	return &file_api_clusters_v1alpha1_cluster_proto_enumTypes[4]
}

func (x KantaloupePluginName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KantaloupePluginName.Descriptor instead.
func (KantaloupePluginName) EnumDescriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{4}
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	Metadata *types.ObjectMeta `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// ClusterSpec describes how the cluster execution will look like and when it
	// will actually run.
	Spec *ClusterSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// ClusterStatus contains the cluster status. The ClusterStatus will be stored
	// in the kubeadm-config ConfigMap in the cluster, and then updated by kubeadm
	// when additional control plane instance joins or leaves the cluster.
	Status *ClusterStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetMetadata() *types.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Cluster) GetSpec() *ClusterSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Cluster) GetStatus() *ClusterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider represents the cloud provider name of the member cluster.
	Provider ClusterProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterProvider" json:"provider,omitempty"`
	// ClusterType represents the type of cluster.
	Type ClusterType `protobuf:"varint,2,opt,name=type,proto3,enum=kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterType" json:"type,omitempty"`
	// The API endpoint of the member cluster. This can be a hostname,
	// hostname:port, IP or IP:port.
	ApiEndpoint string `protobuf:"bytes,3,opt,name=api_endpoint,json=apiEndpoint,proto3" json:"api_endpoint,omitempty"`
	// Region represents the region of the member cluster locate in.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// Zone represents the zone of the member cluster locate in.
	Zone string `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
	// AliasName represents the alias of the cluster.
	AliasName string `protobuf:"bytes,6,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	// description represents the description of the cluster.
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// PrometheusAddress represents the address of prometheus for the cluster.
	PrometheusAddress string `protobuf:"bytes,8,opt,name=prometheus_address,json=prometheusAddress,proto3" json:"prometheus_address,omitempty"`
	// GatewayAddress represents the address of gateway for the apiserver.
	GatewayAddress string `protobuf:"bytes,9,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
}

func (x *ClusterSpec) Reset() {
	*x = ClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSpec) ProtoMessage() {}

func (x *ClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSpec.ProtoReflect.Descriptor instead.
func (*ClusterSpec) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterSpec) GetProvider() ClusterProvider {
	if x != nil {
		return x.Provider
	}
	return ClusterProvider_CLUSTER_PROVIDER_UNSPECIFIED
}

func (x *ClusterSpec) GetType() ClusterType {
	if x != nil {
		return x.Type
	}
	return ClusterType_CLUSTER_TYPE_UNSPECIFIED
}

func (x *ClusterSpec) GetApiEndpoint() string {
	if x != nil {
		return x.ApiEndpoint
	}
	return ""
}

func (x *ClusterSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ClusterSpec) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ClusterSpec) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *ClusterSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterSpec) GetPrometheusAddress() string {
	if x != nil {
		return x.PrometheusAddress
	}
	return ""
}

func (x *ClusterSpec) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

type ClusterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KubernetesVersion represents version of the member cluster.
	KubernetesVersion string `protobuf:"bytes,1,opt,name=kubernetesVersion,proto3" json:"kubernetesVersion,omitempty"`
	// KubeSystemId represents the uuid of sub cluster kube-system namespace.
	KubeSystemID string `protobuf:"bytes,2,opt,name=kubeSystemID,proto3" json:"kubeSystemID,omitempty"`
	// ClusterVersion represents the version of the member cluster.
	ClusterVersion string `protobuf:"bytes,3,opt,name=clusterVersion,proto3" json:"clusterVersion,omitempty"`
	// ResourceSummary represents the node of the member cluster.
	NodeSummary *ResourceSummary `protobuf:"bytes,4,opt,name=node_summary,json=nodeSummary,proto3" json:"node_summary,omitempty"`
	// ResourceSummary represents the pod of the member cluster.
	PodSummary *ResourceSummary `protobuf:"bytes,5,opt,name=pod_summary,json=podSummary,proto3" json:"pod_summary,omitempty"`
	// ResourceSummary represents the kantaloupeflow of the member cluster.
	KantaloupeflowSummary *ResourceSummary `protobuf:"bytes,6,opt,name=kantaloupeflow_summary,json=kantaloupeflowSummary,proto3" json:"kantaloupeflow_summary,omitempty"`
	// The cpu usage of the member cluster.
	CpuUsage float64 `protobuf:"fixed64,7,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	// The memory usage of the member cluster.
	MemoryUsage        float64      `protobuf:"fixed64,8,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	GpuTotal           int32        `protobuf:"varint,9,opt,name=gpu_total,json=gpuTotal,proto3" json:"gpu_total,omitempty"`
	GpuMemoryTotal     int64        `protobuf:"varint,10,opt,name=gpu_memory_total,json=gpuMemoryTotal,proto3" json:"gpu_memory_total,omitempty"`
	CpuTotal           int32        `protobuf:"varint,11,opt,name=cpu_total,json=cpuTotal,proto3" json:"cpu_total,omitempty"`
	MemoryTotal        int64        `protobuf:"varint,12,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	GpuCoreUsage       float64      `protobuf:"fixed64,13,opt,name=gpu_core_usage,json=gpuCoreUsage,proto3" json:"gpu_core_usage,omitempty"`
	GpuMemoryUsage     float64      `protobuf:"fixed64,14,opt,name=gpu_memory_usage,json=gpuMemoryUsage,proto3" json:"gpu_memory_usage,omitempty"`
	GpuCoreAllocated   float64      `protobuf:"fixed64,15,opt,name=gpu_core_allocated,json=gpuCoreAllocated,proto3" json:"gpu_core_allocated,omitempty"`
	GpuMemoryAllocated float64      `protobuf:"fixed64,16,opt,name=gpu_memory_allocated,json=gpuMemoryAllocated,proto3" json:"gpu_memory_allocated,omitempty"`
	State              ClusterState `protobuf:"varint,17,opt,name=state,proto3,enum=kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterState" json:"state,omitempty"`
	// Current condition of cluster.
	Conditions []*types.Condition `protobuf:"bytes,18,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *ClusterStatus) Reset() {
	*x = ClusterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatus) ProtoMessage() {}

func (x *ClusterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatus.ProtoReflect.Descriptor instead.
func (*ClusterStatus) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterStatus) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *ClusterStatus) GetKubeSystemID() string {
	if x != nil {
		return x.KubeSystemID
	}
	return ""
}

func (x *ClusterStatus) GetClusterVersion() string {
	if x != nil {
		return x.ClusterVersion
	}
	return ""
}

func (x *ClusterStatus) GetNodeSummary() *ResourceSummary {
	if x != nil {
		return x.NodeSummary
	}
	return nil
}

func (x *ClusterStatus) GetPodSummary() *ResourceSummary {
	if x != nil {
		return x.PodSummary
	}
	return nil
}

func (x *ClusterStatus) GetKantaloupeflowSummary() *ResourceSummary {
	if x != nil {
		return x.KantaloupeflowSummary
	}
	return nil
}

func (x *ClusterStatus) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *ClusterStatus) GetMemoryUsage() float64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *ClusterStatus) GetGpuTotal() int32 {
	if x != nil {
		return x.GpuTotal
	}
	return 0
}

func (x *ClusterStatus) GetGpuMemoryTotal() int64 {
	if x != nil {
		return x.GpuMemoryTotal
	}
	return 0
}

func (x *ClusterStatus) GetCpuTotal() int32 {
	if x != nil {
		return x.CpuTotal
	}
	return 0
}

func (x *ClusterStatus) GetMemoryTotal() int64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

func (x *ClusterStatus) GetGpuCoreUsage() float64 {
	if x != nil {
		return x.GpuCoreUsage
	}
	return 0
}

func (x *ClusterStatus) GetGpuMemoryUsage() float64 {
	if x != nil {
		return x.GpuMemoryUsage
	}
	return 0
}

func (x *ClusterStatus) GetGpuCoreAllocated() float64 {
	if x != nil {
		return x.GpuCoreAllocated
	}
	return 0
}

func (x *ClusterStatus) GetGpuMemoryAllocated() float64 {
	if x != nil {
		return x.GpuMemoryAllocated
	}
	return 0
}

func (x *ClusterStatus) GetState() ClusterState {
	if x != nil {
		return x.State
	}
	return ClusterState_UNSPECIFED
}

func (x *ClusterStatus) GetConditions() []*types.Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// ResourceSummary refers to a resource totally.
type ResourceSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Refers to a resource totally.
	TotalNum int32 `protobuf:"varint,1,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	// Refers to a resource has been ready.
	ReadyNum int32 `protobuf:"varint,2,opt,name=ready_num,json=readyNum,proto3" json:"ready_num,omitempty"`
}

func (x *ResourceSummary) Reset() {
	*x = ResourceSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSummary) ProtoMessage() {}

func (x *ResourceSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSummary.ProtoReflect.Descriptor instead.
func (*ResourceSummary) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceSummary) GetTotalNum() int32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

func (x *ResourceSummary) GetReadyNum() int32 {
	if x != nil {
		return x.ReadyNum
	}
	return 0
}

type PlatformSummury struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterNum             int32                     `protobuf:"varint,1,opt,name=cluster_num,json=clusterNum,proto3" json:"cluster_num,omitempty"`
	NodeNum                int32                     `protobuf:"varint,2,opt,name=node_num,json=nodeNum,proto3" json:"node_num,omitempty"`
	AcceleratorCardNum     int32                     `protobuf:"varint,3,opt,name=accelerator_card_num,json=acceleratorCardNum,proto3" json:"accelerator_card_num,omitempty"`
	KantaloupeflowNum      int32                     `protobuf:"varint,4,opt,name=kantaloupeflow_num,json=kantaloupeflowNum,proto3" json:"kantaloupeflow_num,omitempty"`
	AcceleratorCardSummury []*AcceleratorCardSummury `protobuf:"bytes,5,rep,name=accelerator_card_summury,json=acceleratorCardSummury,proto3" json:"accelerator_card_summury,omitempty"`
}

func (x *PlatformSummury) Reset() {
	*x = PlatformSummury{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformSummury) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformSummury) ProtoMessage() {}

func (x *PlatformSummury) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformSummury.ProtoReflect.Descriptor instead.
func (*PlatformSummury) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *PlatformSummury) GetClusterNum() int32 {
	if x != nil {
		return x.ClusterNum
	}
	return 0
}

func (x *PlatformSummury) GetNodeNum() int32 {
	if x != nil {
		return x.NodeNum
	}
	return 0
}

func (x *PlatformSummury) GetAcceleratorCardNum() int32 {
	if x != nil {
		return x.AcceleratorCardNum
	}
	return 0
}

func (x *PlatformSummury) GetKantaloupeflowNum() int32 {
	if x != nil {
		return x.KantaloupeflowNum
	}
	return 0
}

func (x *PlatformSummury) GetAcceleratorCardSummury() []*AcceleratorCardSummury {
	if x != nil {
		return x.AcceleratorCardSummury
	}
	return nil
}

type AcceleratorCardSummury struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode      string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	TotalNum  int32  `protobuf:"varint,3,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	UseageNum int32  `protobuf:"varint,4,opt,name=useage_num,json=useageNum,proto3" json:"useage_num,omitempty"`
	IdelNum   int32  `protobuf:"varint,5,opt,name=idel_num,json=idelNum,proto3" json:"idel_num,omitempty"`
}

func (x *AcceleratorCardSummury) Reset() {
	*x = AcceleratorCardSummury{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceleratorCardSummury) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceleratorCardSummury) ProtoMessage() {}

func (x *AcceleratorCardSummury) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceleratorCardSummury.ProtoReflect.Descriptor instead.
func (*AcceleratorCardSummury) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *AcceleratorCardSummury) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *AcceleratorCardSummury) GetTotalNum() int32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

func (x *AcceleratorCardSummury) GetUseageNum() int32 {
	if x != nil {
		return x.UseageNum
	}
	return 0
}

func (x *AcceleratorCardSummury) GetIdelNum() int32 {
	if x != nil {
		return x.IdelNum
	}
	return 0
}

type GetPlatformSummuryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// threshold is the threshold of idel gpu.
	// e.g. threshold = 10, means that the gpu is idel when the usage rate is less than 10.
	Threshold int32 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *GetPlatformSummuryRequest) Reset() {
	*x = GetPlatformSummuryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformSummuryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformSummuryRequest) ProtoMessage() {}

func (x *GetPlatformSummuryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformSummuryRequest.ProtoReflect.Descriptor instead.
func (*GetPlatformSummuryRequest) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *GetPlatformSummuryRequest) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

// Get Clusters information List.
type ListClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the user-specified identifier.
	// This field may not be updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Page requested.
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Size per page requested.
	PageSize int32           `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Type     ClusterType     `protobuf:"varint,4,opt,name=type,proto3,enum=kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterType" json:"type,omitempty"`
	Provider ClusterProvider `protobuf:"varint,5,opt,name=provider,proto3,enum=kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterProvider" json:"provider,omitempty"`
	State    ClusterState    `protobuf:"varint,6,opt,name=state,proto3,enum=kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterState" json:"state,omitempty"`
	// sort_option determines the cluster list order reference.
	SortOption *types.SortOption `protobuf:"bytes,7,opt,name=sort_option,json=sortOption,proto3" json:"sort_option,omitempty"`
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *ListClustersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListClustersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListClustersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetType() ClusterType {
	if x != nil {
		return x.Type
	}
	return ClusterType_CLUSTER_TYPE_UNSPECIFIED
}

func (x *ListClustersRequest) GetProvider() ClusterProvider {
	if x != nil {
		return x.Provider
	}
	return ClusterProvider_CLUSTER_PROVIDER_UNSPECIFIED
}

func (x *ListClustersRequest) GetState() ClusterState {
	if x != nil {
		return x.State
	}
	return ClusterState_UNSPECIFED
}

func (x *ListClustersRequest) GetSortOption() *types.SortOption {
	if x != nil {
		return x.SortOption
	}
	return nil
}

// Clusters information List.
type ListClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data The data field is the YAML details
	Items []*Cluster `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Pagination returned contains current page, size, and total.
	Pagination *types.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *ListClustersResponse) GetItems() []*Cluster {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListClustersResponse) GetPagination() *types.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// IntegrateClusterRequest requests to integrates a cluster.
type IntegrateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the user-specified identifier.
	// This field may not be updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// It is an alias given by the user and can be changed at will.
	AliasName string `protobuf:"bytes,2,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	// Provider represents the cloud provider name of the member cluster.
	Provider ClusterProvider `protobuf:"varint,3,opt,name=provider,proto3,enum=kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterProvider" json:"provider,omitempty"`
	// Labels are key/value pairs that are attached to objects.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Annotations to attach arbitrary metadata to objects.
	Annotations map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// description represents the details of the member cluster.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// kubeConfig of the cluster.
	KubeConfig string `protobuf:"bytes,7,opt,name=kube_config,json=kubeConfig,proto3" json:"kube_config,omitempty"`
	// prometheusAddress represents the address of prometheus for the cluster.
	PrometheusAddress string `protobuf:"bytes,8,opt,name=prometheus_address,json=prometheusAddress,proto3" json:"prometheus_address,omitempty"`
	// gatewayAddress represents the address of gateway for the apiserver.
	GatewayAddress string `protobuf:"bytes,9,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
	// ClusterType represents the type of cluster.
	Type ClusterType `protobuf:"varint,10,opt,name=type,proto3,enum=kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterType" json:"type,omitempty"`
}

func (x *IntegrateClusterRequest) Reset() {
	*x = IntegrateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrateClusterRequest) ProtoMessage() {}

func (x *IntegrateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrateClusterRequest.ProtoReflect.Descriptor instead.
func (*IntegrateClusterRequest) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *IntegrateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IntegrateClusterRequest) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *IntegrateClusterRequest) GetProvider() ClusterProvider {
	if x != nil {
		return x.Provider
	}
	return ClusterProvider_CLUSTER_PROVIDER_UNSPECIFIED
}

func (x *IntegrateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *IntegrateClusterRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *IntegrateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IntegrateClusterRequest) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

func (x *IntegrateClusterRequest) GetPrometheusAddress() string {
	if x != nil {
		return x.PrometheusAddress
	}
	return ""
}

func (x *IntegrateClusterRequest) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

func (x *IntegrateClusterRequest) GetType() ClusterType {
	if x != nil {
		return x.Type
	}
	return ClusterType_CLUSTER_TYPE_UNSPECIFIED
}

// DeleteClusterRequest defines a request for deleting a cluster.
type DeleteClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the user-specified identifier.
	// This field may not be updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetClusterRequest returns cluster information.
type GetClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the user-specified identifier.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *GetClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ValidateKubeconfigRequest defines a request for validating whether the kubeconfig is valid.
type ValidateKubeconfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kubeconfig is the str of kube config.
	Kubeconfig string `protobuf:"bytes,1,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
}

func (x *ValidateKubeconfigRequest) Reset() {
	*x = ValidateKubeconfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateKubeconfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateKubeconfigRequest) ProtoMessage() {}

func (x *ValidateKubeconfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateKubeconfigRequest.ProtoReflect.Descriptor instead.
func (*ValidateKubeconfigRequest) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *ValidateKubeconfigRequest) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

// ValidateKubeconfigResponse defines a response to return the validate result.
type ValidateKubeconfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// validate represent whether the config is valid.
	Validate bool `protobuf:"varint,1,opt,name=validate,proto3" json:"validate,omitempty"`
}

func (x *ValidateKubeconfigResponse) Reset() {
	*x = ValidateKubeconfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateKubeconfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateKubeconfigResponse) ProtoMessage() {}

func (x *ValidateKubeconfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateKubeconfigResponse.ProtoReflect.Descriptor instead.
func (*ValidateKubeconfigResponse) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{13}
}

func (x *ValidateKubeconfigResponse) GetValidate() bool {
	if x != nil {
		return x.Validate
	}
	return false
}

// UpdateClusterRequest defines a request for updating a cluster.
type UpdateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the user-specified identifier.
	// This field will not be updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// It is an alias given by the user and can be changed at will.
	AliasName string `protobuf:"bytes,2,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	// Labels are key/value pairs that are attached to objects.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Annotations to attach arbitrary metadata to objects.
	Annotations map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// description represents the details of the member cluster.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// prometheusAddress represents the address of prometheus for the cluster.
	PrometheusAddress string `protobuf:"bytes,6,opt,name=prometheus_address,json=prometheusAddress,proto3" json:"prometheus_address,omitempty"`
	// gatewayAddress represents the address of gateway for the apiserver.
	GatewayAddress string `protobuf:"bytes,7,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
	// kubeConfig of the cluster.
	KubeConfig string `protobuf:"bytes,8,opt,name=kube_config,json=kubeConfig,proto3" json:"kube_config,omitempty"`
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClusterRequest) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *UpdateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateClusterRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetPrometheusAddress() string {
	if x != nil {
		return x.PrometheusAddress
	}
	return ""
}

func (x *UpdateClusterRequest) GetGatewayAddress() string {
	if x != nil {
		return x.GatewayAddress
	}
	return ""
}

func (x *UpdateClusterRequest) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

type ListClusterVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// versions represents existing cluster versions.
	Versions []string `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *ListClusterVersionsResponse) Reset() {
	*x = ListClusterVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterVersionsResponse) ProtoMessage() {}

func (x *ListClusterVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterVersionsResponse) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *ListClusterVersionsResponse) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

type GPUSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// model represents the gpu type.
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// total represents the total number of gpu.
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// mem_allocated represents the gpumemory allocated number of gpu.
	MemAllocated float64 `protobuf:"fixed64,3,opt,name=mem_allocated,json=memAllocated,proto3" json:"mem_allocated,omitempty"`
	// mem_usage represents the gpumemory usage rate of gpu.
	MemUsage float64 `protobuf:"fixed64,4,opt,name=mem_usage,json=memUsage,proto3" json:"mem_usage,omitempty"`
	// core_allocated represents the gpucore allocated number of gpu.
	CoreAllocated float64 `protobuf:"fixed64,5,opt,name=core_allocated,json=coreAllocated,proto3" json:"core_allocated,omitempty"`
	// core_usage represents the gpucore usage rate of gpu.
	CoreUsage float64 `protobuf:"fixed64,6,opt,name=core_usage,json=coreUsage,proto3" json:"core_usage,omitempty"`
}

func (x *GPUSummary) Reset() {
	*x = GPUSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUSummary) ProtoMessage() {}

func (x *GPUSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUSummary.ProtoReflect.Descriptor instead.
func (*GPUSummary) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{16}
}

func (x *GPUSummary) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GPUSummary) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GPUSummary) GetMemAllocated() float64 {
	if x != nil {
		return x.MemAllocated
	}
	return 0
}

func (x *GPUSummary) GetMemUsage() float64 {
	if x != nil {
		return x.MemUsage
	}
	return 0
}

func (x *GPUSummary) GetCoreAllocated() float64 {
	if x != nil {
		return x.CoreAllocated
	}
	return 0
}

func (x *GPUSummary) GetCoreUsage() float64 {
	if x != nil {
		return x.CoreUsage
	}
	return 0
}

type GetPlatformGPUTopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// topn is the number of top n gpu
	Topn       int32      `protobuf:"varint,1,opt,name=topn,proto3" json:"topn,omitempty"`
	RankOption RankOption `protobuf:"varint,2,opt,name=rank_option,json=rankOption,proto3,enum=kantaloupe.dynamia.ai.api.clusters.v1alpha1.RankOption" json:"rank_option,omitempty"`
}

func (x *GetPlatformGPUTopRequest) Reset() {
	*x = GetPlatformGPUTopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformGPUTopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformGPUTopRequest) ProtoMessage() {}

func (x *GetPlatformGPUTopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformGPUTopRequest.ProtoReflect.Descriptor instead.
func (*GetPlatformGPUTopRequest) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *GetPlatformGPUTopRequest) GetTopn() int32 {
	if x != nil {
		return x.Topn
	}
	return 0
}

func (x *GetPlatformGPUTopRequest) GetRankOption() RankOption {
	if x != nil {
		return x.RankOption
	}
	return RankOption_RANK_OPTION_UNSPECIFIED
}

type GetPlatformGPUTopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gpus []*GPUSummary `protobuf:"bytes,1,rep,name=gpus,proto3" json:"gpus,omitempty"`
}

func (x *GetPlatformGPUTopResponse) Reset() {
	*x = GetPlatformGPUTopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformGPUTopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformGPUTopResponse) ProtoMessage() {}

func (x *GetPlatformGPUTopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformGPUTopResponse.ProtoReflect.Descriptor instead.
func (*GetPlatformGPUTopResponse) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{18}
}

func (x *GetPlatformGPUTopResponse) GetGpus() []*GPUSummary {
	if x != nil {
		return x.Gpus
	}
	return nil
}

type KantaloupePlugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      KantaloupePluginName `protobuf:"varint,1,opt,name=name,proto3,enum=kantaloupe.dynamia.ai.api.clusters.v1alpha1.KantaloupePluginName" json:"name,omitempty"`
	Namespace string               `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *KantaloupePlugin) Reset() {
	*x = KantaloupePlugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KantaloupePlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KantaloupePlugin) ProtoMessage() {}

func (x *KantaloupePlugin) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KantaloupePlugin.ProtoReflect.Descriptor instead.
func (*KantaloupePlugin) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *KantaloupePlugin) GetName() KantaloupePluginName {
	if x != nil {
		return x.Name
	}
	return KantaloupePluginName_KANTALOUPE_PLUGIN_NAME_UNSPECIFED
}

func (x *KantaloupePlugin) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type GetClusterPluginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the cluster name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetClusterPluginsRequest) Reset() {
	*x = GetClusterPluginsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterPluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterPluginsRequest) ProtoMessage() {}

func (x *GetClusterPluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterPluginsRequest.ProtoReflect.Descriptor instead.
func (*GetClusterPluginsRequest) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{20}
}

func (x *GetClusterPluginsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetClusterPluginsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugins []*KantaloupePlugin `protobuf:"bytes,1,rep,name=plugins,proto3" json:"plugins,omitempty"`
}

func (x *GetClusterPluginsResponse) Reset() {
	*x = GetClusterPluginsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterPluginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterPluginsResponse) ProtoMessage() {}

func (x *GetClusterPluginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterPluginsResponse.ProtoReflect.Descriptor instead.
func (*GetClusterPluginsResponse) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{21}
}

func (x *GetClusterPluginsResponse) GetPlugins() []*KantaloupePlugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

// Get cluster Card request type.
type ResourceName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardModel    string   `protobuf:"bytes,1,opt,name=card_model,json=cardModel,proto3" json:"card_model,omitempty"`
	ResourceKeys []string `protobuf:"bytes,2,rep,name=resource_keys,json=resourceKeys,proto3" json:"resource_keys,omitempty"`
}

func (x *ResourceName) Reset() {
	*x = ResourceName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceName) ProtoMessage() {}

func (x *ResourceName) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceName.ProtoReflect.Descriptor instead.
func (*ResourceName) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{22}
}

func (x *ResourceName) GetCardModel() string {
	if x != nil {
		return x.CardModel
	}
	return ""
}

func (x *ResourceName) GetResourceKeys() []string {
	if x != nil {
		return x.ResourceKeys
	}
	return nil
}

type CardRequestType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestType   string          `protobuf:"bytes,1,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	ResourceNames []*ResourceName `protobuf:"bytes,2,rep,name=resource_names,json=resourceNames,proto3" json:"resource_names,omitempty"`
}

func (x *CardRequestType) Reset() {
	*x = CardRequestType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardRequestType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardRequestType) ProtoMessage() {}

func (x *CardRequestType) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardRequestType.ProtoReflect.Descriptor instead.
func (*CardRequestType) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{23}
}

func (x *CardRequestType) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *CardRequestType) GetResourceNames() []*ResourceName {
	if x != nil {
		return x.ResourceNames
	}
	return nil
}

type GetClusterCardRequestTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetClusterCardRequestTypeRequest) Reset() {
	*x = GetClusterCardRequestTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterCardRequestTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterCardRequestTypeRequest) ProtoMessage() {}

func (x *GetClusterCardRequestTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterCardRequestTypeRequest.ProtoReflect.Descriptor instead.
func (*GetClusterCardRequestTypeRequest) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{24}
}

func (x *GetClusterCardRequestTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetClusterCardRequestTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestTypes []*CardRequestType `protobuf:"bytes,1,rep,name=request_types,json=requestTypes,proto3" json:"request_types,omitempty"`
}

func (x *GetClusterCardRequestTypeResponse) Reset() {
	*x = GetClusterCardRequestTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterCardRequestTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterCardRequestTypeResponse) ProtoMessage() {}

func (x *GetClusterCardRequestTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_clusters_v1alpha1_cluster_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterCardRequestTypeResponse.ProtoReflect.Descriptor instead.
func (*GetClusterCardRequestTypeResponse) Descriptor() ([]byte, []int) {
	return file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP(), []int{25}
}

func (x *GetClusterCardRequestTypeResponse) GetRequestTypes() []*CardRequestType {
	if x != nil {
		return x.RequestTypes
	}
	return nil
}

var File_api_clusters_v1alpha1_cluster_proto protoreflect.FileDescriptor

var file_api_clusters_v1alpha1_cluster_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9d, 0x03, 0x0a, 0x0b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x58, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e,
	0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd2, 0x07, 0x0a, 0x0d,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6b,
	0x75, 0x62, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x0b, 0x70, 0x6f, 0x64, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x6f, 0x64,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x73, 0x0a, 0x16, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x15, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x67, 0x70, 0x75, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x70, 0x75,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x70, 0x75,
	0x43, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x70, 0x75,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x4b, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x75, 0x6d, 0x22, 0xad, 0x02,
	0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x75, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12,
	0x2d, 0x0a, 0x12, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x7d,
	0x0a, 0x18, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x75, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75,
	0x6d, 0x6d, 0x75, 0x72, 0x79, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x75, 0x72, 0x79, 0x22, 0x83, 0x01,
	0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x75, 0x6d, 0x6d, 0x75, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x64, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x22, 0x39, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x75, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xa1,
	0x03, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xed, 0x05, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75,
	0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x68, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x77, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6b,
	0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x19, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x38, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x22, 0xbc, 0x04, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6b,
	0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x74, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x65, 0x75, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x39, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x47,
	0x50, 0x55, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x65,
	0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x50, 0x55,
	0x54, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f,
	0x70, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6e, 0x12, 0x58,
	0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x61,
	0x6e, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x50, 0x55, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x50, 0x55, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x67, 0x70,
	0x75, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75,
	0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x2e, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x07, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f,
	0x75, 0x70, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x22, 0x52, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75,
	0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x36, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2a, 0xb5, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49,
	0x43, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x44, 0x48, 0x41, 0x54, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x53, 0x48, 0x49, 0x46, 0x54, 0x34, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55,
	0x53, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x56, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x41, 0x4e, 0x5a, 0x55, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x57, 0x53, 0x5f, 0x45, 0x4b, 0x53, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x4c, 0x49, 0x59, 0x55, 0x4e, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x48,
	0x55, 0x41, 0x57, 0x45, 0x49, 0x5f, 0x43, 0x43, 0x45, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x43, 0x50, 0x5f, 0x47, 0x4b, 0x45, 0x10, 0x08, 0x2a, 0x9b, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x54, 0x41, 0x58, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4d, 0x42, 0x52, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x4f, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x53, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x4c, 0x55, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x52, 0x45,
	0x58, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x59, 0x47, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45,
	0x55, 0x52, 0x4f, 0x4e, 0x10, 0x08, 0x2a, 0x39, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x10,
	0x02, 0x2a, 0x57, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x2a, 0x47, 0x0a, 0x14, 0x4b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x41, 0x4e, 0x54, 0x41, 0x4c, 0x4f, 0x55, 0x50, 0x45,
	0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x4d,
	0x49, 0x10, 0x01, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_clusters_v1alpha1_cluster_proto_rawDescOnce sync.Once
	file_api_clusters_v1alpha1_cluster_proto_rawDescData = file_api_clusters_v1alpha1_cluster_proto_rawDesc
)

func file_api_clusters_v1alpha1_cluster_proto_rawDescGZIP() []byte {
	file_api_clusters_v1alpha1_cluster_proto_rawDescOnce.Do(func() {
		file_api_clusters_v1alpha1_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_clusters_v1alpha1_cluster_proto_rawDescData)
	})
	return file_api_clusters_v1alpha1_cluster_proto_rawDescData
}

var file_api_clusters_v1alpha1_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_api_clusters_v1alpha1_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_api_clusters_v1alpha1_cluster_proto_goTypes = []interface{}{
	(ClusterProvider)(0),                      // 0: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterProvider
	(ClusterType)(0),                          // 1: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterType
	(ClusterState)(0),                         // 2: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterState
	(RankOption)(0),                           // 3: kantaloupe.dynamia.ai.api.clusters.v1alpha1.RankOption
	(KantaloupePluginName)(0),                 // 4: kantaloupe.dynamia.ai.api.clusters.v1alpha1.KantaloupePluginName
	(*Cluster)(nil),                           // 5: kantaloupe.dynamia.ai.api.clusters.v1alpha1.Cluster
	(*ClusterSpec)(nil),                       // 6: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterSpec
	(*ClusterStatus)(nil),                     // 7: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterStatus
	(*ResourceSummary)(nil),                   // 8: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ResourceSummary
	(*PlatformSummury)(nil),                   // 9: kantaloupe.dynamia.ai.api.clusters.v1alpha1.PlatformSummury
	(*AcceleratorCardSummury)(nil),            // 10: kantaloupe.dynamia.ai.api.clusters.v1alpha1.AcceleratorCardSummury
	(*GetPlatformSummuryRequest)(nil),         // 11: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetPlatformSummuryRequest
	(*ListClustersRequest)(nil),               // 12: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ListClustersRequest
	(*ListClustersResponse)(nil),              // 13: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ListClustersResponse
	(*IntegrateClusterRequest)(nil),           // 14: kantaloupe.dynamia.ai.api.clusters.v1alpha1.IntegrateClusterRequest
	(*DeleteClusterRequest)(nil),              // 15: kantaloupe.dynamia.ai.api.clusters.v1alpha1.DeleteClusterRequest
	(*GetClusterRequest)(nil),                 // 16: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetClusterRequest
	(*ValidateKubeconfigRequest)(nil),         // 17: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ValidateKubeconfigRequest
	(*ValidateKubeconfigResponse)(nil),        // 18: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ValidateKubeconfigResponse
	(*UpdateClusterRequest)(nil),              // 19: kantaloupe.dynamia.ai.api.clusters.v1alpha1.UpdateClusterRequest
	(*ListClusterVersionsResponse)(nil),       // 20: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ListClusterVersionsResponse
	(*GPUSummary)(nil),                        // 21: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GPUSummary
	(*GetPlatformGPUTopRequest)(nil),          // 22: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetPlatformGPUTopRequest
	(*GetPlatformGPUTopResponse)(nil),         // 23: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetPlatformGPUTopResponse
	(*KantaloupePlugin)(nil),                  // 24: kantaloupe.dynamia.ai.api.clusters.v1alpha1.KantaloupePlugin
	(*GetClusterPluginsRequest)(nil),          // 25: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetClusterPluginsRequest
	(*GetClusterPluginsResponse)(nil),         // 26: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetClusterPluginsResponse
	(*ResourceName)(nil),                      // 27: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ResourceName
	(*CardRequestType)(nil),                   // 28: kantaloupe.dynamia.ai.api.clusters.v1alpha1.CardRequestType
	(*GetClusterCardRequestTypeRequest)(nil),  // 29: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetClusterCardRequestTypeRequest
	(*GetClusterCardRequestTypeResponse)(nil), // 30: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetClusterCardRequestTypeResponse
	nil,                      // 31: kantaloupe.dynamia.ai.api.clusters.v1alpha1.IntegrateClusterRequest.LabelsEntry
	nil,                      // 32: kantaloupe.dynamia.ai.api.clusters.v1alpha1.IntegrateClusterRequest.AnnotationsEntry
	nil,                      // 33: kantaloupe.dynamia.ai.api.clusters.v1alpha1.UpdateClusterRequest.LabelsEntry
	nil,                      // 34: kantaloupe.dynamia.ai.api.clusters.v1alpha1.UpdateClusterRequest.AnnotationsEntry
	(*types.ObjectMeta)(nil), // 35: kantaloupe.dynamia.ai.api.types.ObjectMeta
	(*types.Condition)(nil),  // 36: kantaloupe.dynamia.ai.api.types.Condition
	(*types.SortOption)(nil), // 37: kantaloupe.dynamia.ai.api.types.SortOption
	(*types.Pagination)(nil), // 38: kantaloupe.dynamia.ai.api.types.Pagination
}
var file_api_clusters_v1alpha1_cluster_proto_depIdxs = []int32{
	35, // 0: kantaloupe.dynamia.ai.api.clusters.v1alpha1.Cluster.metadata:type_name -> kantaloupe.dynamia.ai.api.types.ObjectMeta
	6,  // 1: kantaloupe.dynamia.ai.api.clusters.v1alpha1.Cluster.spec:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterSpec
	7,  // 2: kantaloupe.dynamia.ai.api.clusters.v1alpha1.Cluster.status:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterStatus
	0,  // 3: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterSpec.provider:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterProvider
	1,  // 4: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterSpec.type:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterType
	8,  // 5: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterStatus.node_summary:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ResourceSummary
	8,  // 6: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterStatus.pod_summary:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ResourceSummary
	8,  // 7: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterStatus.kantaloupeflow_summary:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ResourceSummary
	2,  // 8: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterStatus.state:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterState
	36, // 9: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterStatus.conditions:type_name -> kantaloupe.dynamia.ai.api.types.Condition
	10, // 10: kantaloupe.dynamia.ai.api.clusters.v1alpha1.PlatformSummury.accelerator_card_summury:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.AcceleratorCardSummury
	1,  // 11: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ListClustersRequest.type:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterType
	0,  // 12: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ListClustersRequest.provider:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterProvider
	2,  // 13: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ListClustersRequest.state:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterState
	37, // 14: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ListClustersRequest.sort_option:type_name -> kantaloupe.dynamia.ai.api.types.SortOption
	5,  // 15: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ListClustersResponse.items:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.Cluster
	38, // 16: kantaloupe.dynamia.ai.api.clusters.v1alpha1.ListClustersResponse.pagination:type_name -> kantaloupe.dynamia.ai.api.types.Pagination
	0,  // 17: kantaloupe.dynamia.ai.api.clusters.v1alpha1.IntegrateClusterRequest.provider:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterProvider
	31, // 18: kantaloupe.dynamia.ai.api.clusters.v1alpha1.IntegrateClusterRequest.labels:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.IntegrateClusterRequest.LabelsEntry
	32, // 19: kantaloupe.dynamia.ai.api.clusters.v1alpha1.IntegrateClusterRequest.annotations:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.IntegrateClusterRequest.AnnotationsEntry
	1,  // 20: kantaloupe.dynamia.ai.api.clusters.v1alpha1.IntegrateClusterRequest.type:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ClusterType
	33, // 21: kantaloupe.dynamia.ai.api.clusters.v1alpha1.UpdateClusterRequest.labels:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.UpdateClusterRequest.LabelsEntry
	34, // 22: kantaloupe.dynamia.ai.api.clusters.v1alpha1.UpdateClusterRequest.annotations:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.UpdateClusterRequest.AnnotationsEntry
	3,  // 23: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetPlatformGPUTopRequest.rank_option:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.RankOption
	21, // 24: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetPlatformGPUTopResponse.gpus:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.GPUSummary
	4,  // 25: kantaloupe.dynamia.ai.api.clusters.v1alpha1.KantaloupePlugin.name:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.KantaloupePluginName
	24, // 26: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetClusterPluginsResponse.plugins:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.KantaloupePlugin
	27, // 27: kantaloupe.dynamia.ai.api.clusters.v1alpha1.CardRequestType.resource_names:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.ResourceName
	28, // 28: kantaloupe.dynamia.ai.api.clusters.v1alpha1.GetClusterCardRequestTypeResponse.request_types:type_name -> kantaloupe.dynamia.ai.api.clusters.v1alpha1.CardRequestType
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_api_clusters_v1alpha1_cluster_proto_init() }
func file_api_clusters_v1alpha1_cluster_proto_init() {
	if File_api_clusters_v1alpha1_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformSummury); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceleratorCardSummury); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformSummuryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateKubeconfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateKubeconfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformGPUTopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformGPUTopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KantaloupePlugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterPluginsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterPluginsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardRequestType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterCardRequestTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_clusters_v1alpha1_cluster_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterCardRequestTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_clusters_v1alpha1_cluster_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_clusters_v1alpha1_cluster_proto_goTypes,
		DependencyIndexes: file_api_clusters_v1alpha1_cluster_proto_depIdxs,
		EnumInfos:         file_api_clusters_v1alpha1_cluster_proto_enumTypes,
		MessageInfos:      file_api_clusters_v1alpha1_cluster_proto_msgTypes,
	}.Build()
	File_api_clusters_v1alpha1_cluster_proto = out.File
	file_api_clusters_v1alpha1_cluster_proto_rawDesc = nil
	file_api_clusters_v1alpha1_cluster_proto_goTypes = nil
	file_api_clusters_v1alpha1_cluster_proto_depIdxs = nil
}
