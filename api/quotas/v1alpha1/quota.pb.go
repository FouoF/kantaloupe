// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: api/quotas/v1alpha1/quota.proto

package v1alpha1

import (
	types "github.com/dynamia-ai/kantaloupe/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QuotaSpec describes a quota's configuration.
type QuotaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hard contains resource names and their maximum allowed values.
	Hard map[string]string `protobuf:"bytes,1,rep,name=hard,proto3" json:"hard,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuotaSpec) Reset() {
	*x = QuotaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaSpec) ProtoMessage() {}

func (x *QuotaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaSpec.ProtoReflect.Descriptor instead.
func (*QuotaSpec) Descriptor() ([]byte, []int) {
	return file_api_quotas_v1alpha1_quota_proto_rawDescGZIP(), []int{0}
}

func (x *QuotaSpec) GetHard() map[string]string {
	if x != nil {
		return x.Hard
	}
	return nil
}

// QuotaStatus shows the current status of a quota.
type QuotaStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hard is the same as spec.hard.
	Hard map[string]string `protobuf:"bytes,1,rep,name=hard,proto3" json:"hard,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Used shows the current consumption of the quota.
	Used map[string]string `protobuf:"bytes,2,rep,name=used,proto3" json:"used,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuotaStatus) Reset() {
	*x = QuotaStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaStatus) ProtoMessage() {}

func (x *QuotaStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaStatus.ProtoReflect.Descriptor instead.
func (*QuotaStatus) Descriptor() ([]byte, []int) {
	return file_api_quotas_v1alpha1_quota_proto_rawDescGZIP(), []int{1}
}

func (x *QuotaStatus) GetHard() map[string]string {
	if x != nil {
		return x.Hard
	}
	return nil
}

func (x *QuotaStatus) GetUsed() map[string]string {
	if x != nil {
		return x.Used
	}
	return nil
}

// Quota represents a resource quota resource.
type Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	Metadata *types.ObjectMeta `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec defines the quota configuration.
	Spec *QuotaSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status shows the current usage.
	Status *QuotaStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Quota) Reset() {
	*x = Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota) ProtoMessage() {}

func (x *Quota) ProtoReflect() protoreflect.Message {
	mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota.ProtoReflect.Descriptor instead.
func (*Quota) Descriptor() ([]byte, []int) {
	return file_api_quotas_v1alpha1_quota_proto_rawDescGZIP(), []int{2}
}

func (x *Quota) GetMetadata() *types.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Quota) GetSpec() *QuotaSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Quota) GetStatus() *QuotaStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// QuotaResponse represents a quota response.
type QuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the quota name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace where the quota is located.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// CreatedTime is the creation timestamp.
	CreatedTime int64 `protobuf:"varint,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// Hard contains resource names and their maximum allowed values.
	Hard map[string]string `protobuf:"bytes,4,rep,name=hard,proto3" json:"hard,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Used shows the current consumption of the quota.
	Used map[string]string `protobuf:"bytes,5,rep,name=used,proto3" json:"used,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels attached to the quota.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Workloads using the quota.
	Workload  []string `protobuf:"bytes,7,rep,name=workload,proto3" json:"workload,omitempty"`
	IsManaged bool     `protobuf:"varint,8,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`
}

func (x *QuotaResponse) Reset() {
	*x = QuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaResponse) ProtoMessage() {}

func (x *QuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaResponse.ProtoReflect.Descriptor instead.
func (*QuotaResponse) Descriptor() ([]byte, []int) {
	return file_api_quotas_v1alpha1_quota_proto_rawDescGZIP(), []int{3}
}

func (x *QuotaResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuotaResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *QuotaResponse) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *QuotaResponse) GetHard() map[string]string {
	if x != nil {
		return x.Hard
	}
	return nil
}

func (x *QuotaResponse) GetUsed() map[string]string {
	if x != nil {
		return x.Used
	}
	return nil
}

func (x *QuotaResponse) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *QuotaResponse) GetWorkload() []string {
	if x != nil {
		return x.Workload
	}
	return nil
}

func (x *QuotaResponse) GetIsManaged() bool {
	if x != nil {
		return x.IsManaged
	}
	return false
}

// ListQuotasRequest defines a request for listing quotas.
type ListQuotasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fuzzy matches the quota name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional namespace to filter quotas.
	// If empty, quotas from all namespaces will be returned.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Page requested.
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// Size per page requested.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Cluster is the cluster name to query.
	// If empty, the local cluster will be used.
	Cluster string `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// sort_option determines the cluster list order reference.
	SortOption *types.SortOption `protobuf:"bytes,6,opt,name=sort_option,json=sortOption,proto3" json:"sort_option,omitempty"`
}

func (x *ListQuotasRequest) Reset() {
	*x = ListQuotasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuotasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuotasRequest) ProtoMessage() {}

func (x *ListQuotasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuotasRequest.ProtoReflect.Descriptor instead.
func (*ListQuotasRequest) Descriptor() ([]byte, []int) {
	return file_api_quotas_v1alpha1_quota_proto_rawDescGZIP(), []int{4}
}

func (x *ListQuotasRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListQuotasRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListQuotasRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListQuotasRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListQuotasRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ListQuotasRequest) GetSortOption() *types.SortOption {
	if x != nil {
		return x.SortOption
	}
	return nil
}

// ListQuotasResponse defines a response for listing quotas.
type ListQuotasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Items contains the list of quotas.
	Items []*QuotaResponse `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Pagination returned contains current page, size, and total.
	Pagination *types.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListQuotasResponse) Reset() {
	*x = ListQuotasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuotasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuotasResponse) ProtoMessage() {}

func (x *ListQuotasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuotasResponse.ProtoReflect.Descriptor instead.
func (*ListQuotasResponse) Descriptor() ([]byte, []int) {
	return file_api_quotas_v1alpha1_quota_proto_rawDescGZIP(), []int{5}
}

func (x *ListQuotasResponse) GetItems() []*QuotaResponse {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListQuotasResponse) GetPagination() *types.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// DeleteQuotaRequest defines a request for deleting a quota.
type DeleteQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the user-specified identifier.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional namespace to specify where to delete the quota.
	// If empty, the default namespace will be used.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Cluster is the cluster name where the quota is located.
	// If empty, the local cluster will be used.
	Cluster string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *DeleteQuotaRequest) Reset() {
	*x = DeleteQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuotaRequest) ProtoMessage() {}

func (x *DeleteQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuotaRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuotaRequest) Descriptor() ([]byte, []int) {
	return file_api_quotas_v1alpha1_quota_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteQuotaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteQuotaRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteQuotaRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

// CreateQuotaRequest defines a request for creating a quota.
type CreateQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the user-specified identifier for the quota.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace to create the quota in.
	// If empty, the default namespace will be used.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Cluster is the cluster name where the quota should be created.
	// If empty, the local cluster will be used.
	Cluster string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Hard contains resource names and their maximum allowed values.
	Hard map[string]string `protobuf:"bytes,4,rep,name=hard,proto3" json:"hard,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateQuotaRequest) Reset() {
	*x = CreateQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuotaRequest) ProtoMessage() {}

func (x *CreateQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuotaRequest.ProtoReflect.Descriptor instead.
func (*CreateQuotaRequest) Descriptor() ([]byte, []int) {
	return file_api_quotas_v1alpha1_quota_proto_rawDescGZIP(), []int{7}
}

func (x *CreateQuotaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateQuotaRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateQuotaRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *CreateQuotaRequest) GetHard() map[string]string {
	if x != nil {
		return x.Hard
	}
	return nil
}

// UpdateQuotaRequest defines a request for updating a quota.
type UpdateQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the user-specified identifier of the quota to update.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace where the quota is located.
	// If empty, the default namespace will be used.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Cluster is the cluster name where the quota is located.
	// If empty, the local cluster will be used.
	Cluster string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Hard contains resource names and their maximum allowed values.
	Hard map[string]string `protobuf:"bytes,4,rep,name=hard,proto3" json:"hard,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateQuotaRequest) Reset() {
	*x = UpdateQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuotaRequest) ProtoMessage() {}

func (x *UpdateQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuotaRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuotaRequest) Descriptor() ([]byte, []int) {
	return file_api_quotas_v1alpha1_quota_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateQuotaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateQuotaRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateQuotaRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *UpdateQuotaRequest) GetHard() map[string]string {
	if x != nil {
		return x.Hard
	}
	return nil
}

type GetQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the user-specified identifier of the quota to get.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace where the quota is located.
	// If empty, the default namespace will be used.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Cluster is the cluster name where the quota is located.
	// If empty, the local cluster will be used.
	Cluster string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *GetQuotaRequest) Reset() {
	*x = GetQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuotaRequest) ProtoMessage() {}

func (x *GetQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_quotas_v1alpha1_quota_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuotaRequest.ProtoReflect.Descriptor instead.
func (*GetQuotaRequest) Descriptor() ([]byte, []int) {
	return file_api_quotas_v1alpha1_quota_proto_rawDescGZIP(), []int{9}
}

func (x *GetQuotaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetQuotaRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetQuotaRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

var File_api_quotas_v1alpha1_quota_proto protoreflect.FileDescriptor

var file_api_quotas_v1alpha1_quota_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x29, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1a, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98,
	0x01, 0x0a, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x52, 0x0a, 0x04,
	0x68, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x68, 0x61, 0x72, 0x64,
	0x1a, 0x37, 0x0a, 0x09, 0x48, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x02, 0x0a, 0x0b, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x04, 0x68, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x68, 0x61, 0x72, 0x64, 0x12,
	0x54, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x48, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xda, 0x04, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x68,
	0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x68,
	0x61, 0x72, 0x64, 0x12, 0x56, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x48, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a,
	0x09, 0x55, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xde, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xf6, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x04, 0x68,
	0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x68, 0x61, 0x72, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x48, 0x61, 0x72, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf6, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x04, 0x68, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x68, 0x61, 0x72,
	0x64, 0x1a, 0x37, 0x0a, 0x09, 0x48, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2d,
	0x61, 0x69, 0x2f, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_quotas_v1alpha1_quota_proto_rawDescOnce sync.Once
	file_api_quotas_v1alpha1_quota_proto_rawDescData = file_api_quotas_v1alpha1_quota_proto_rawDesc
)

func file_api_quotas_v1alpha1_quota_proto_rawDescGZIP() []byte {
	file_api_quotas_v1alpha1_quota_proto_rawDescOnce.Do(func() {
		file_api_quotas_v1alpha1_quota_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_quotas_v1alpha1_quota_proto_rawDescData)
	})
	return file_api_quotas_v1alpha1_quota_proto_rawDescData
}

var file_api_quotas_v1alpha1_quota_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_api_quotas_v1alpha1_quota_proto_goTypes = []interface{}{
	(*QuotaSpec)(nil),          // 0: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaSpec
	(*QuotaStatus)(nil),        // 1: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaStatus
	(*Quota)(nil),              // 2: kantaloupe.dynamia.ai.api.quotas.v1alpha1.Quota
	(*QuotaResponse)(nil),      // 3: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaResponse
	(*ListQuotasRequest)(nil),  // 4: kantaloupe.dynamia.ai.api.quotas.v1alpha1.ListQuotasRequest
	(*ListQuotasResponse)(nil), // 5: kantaloupe.dynamia.ai.api.quotas.v1alpha1.ListQuotasResponse
	(*DeleteQuotaRequest)(nil), // 6: kantaloupe.dynamia.ai.api.quotas.v1alpha1.DeleteQuotaRequest
	(*CreateQuotaRequest)(nil), // 7: kantaloupe.dynamia.ai.api.quotas.v1alpha1.CreateQuotaRequest
	(*UpdateQuotaRequest)(nil), // 8: kantaloupe.dynamia.ai.api.quotas.v1alpha1.UpdateQuotaRequest
	(*GetQuotaRequest)(nil),    // 9: kantaloupe.dynamia.ai.api.quotas.v1alpha1.GetQuotaRequest
	nil,                        // 10: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaSpec.HardEntry
	nil,                        // 11: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaStatus.HardEntry
	nil,                        // 12: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaStatus.UsedEntry
	nil,                        // 13: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaResponse.HardEntry
	nil,                        // 14: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaResponse.UsedEntry
	nil,                        // 15: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaResponse.LabelsEntry
	nil,                        // 16: kantaloupe.dynamia.ai.api.quotas.v1alpha1.CreateQuotaRequest.HardEntry
	nil,                        // 17: kantaloupe.dynamia.ai.api.quotas.v1alpha1.UpdateQuotaRequest.HardEntry
	(*types.ObjectMeta)(nil),   // 18: kantaloupe.dynamia.ai.api.types.ObjectMeta
	(*types.SortOption)(nil),   // 19: kantaloupe.dynamia.ai.api.types.SortOption
	(*types.Pagination)(nil),   // 20: kantaloupe.dynamia.ai.api.types.Pagination
}
var file_api_quotas_v1alpha1_quota_proto_depIdxs = []int32{
	10, // 0: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaSpec.hard:type_name -> kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaSpec.HardEntry
	11, // 1: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaStatus.hard:type_name -> kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaStatus.HardEntry
	12, // 2: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaStatus.used:type_name -> kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaStatus.UsedEntry
	18, // 3: kantaloupe.dynamia.ai.api.quotas.v1alpha1.Quota.metadata:type_name -> kantaloupe.dynamia.ai.api.types.ObjectMeta
	0,  // 4: kantaloupe.dynamia.ai.api.quotas.v1alpha1.Quota.spec:type_name -> kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaSpec
	1,  // 5: kantaloupe.dynamia.ai.api.quotas.v1alpha1.Quota.status:type_name -> kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaStatus
	13, // 6: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaResponse.hard:type_name -> kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaResponse.HardEntry
	14, // 7: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaResponse.used:type_name -> kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaResponse.UsedEntry
	15, // 8: kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaResponse.labels:type_name -> kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaResponse.LabelsEntry
	19, // 9: kantaloupe.dynamia.ai.api.quotas.v1alpha1.ListQuotasRequest.sort_option:type_name -> kantaloupe.dynamia.ai.api.types.SortOption
	3,  // 10: kantaloupe.dynamia.ai.api.quotas.v1alpha1.ListQuotasResponse.items:type_name -> kantaloupe.dynamia.ai.api.quotas.v1alpha1.QuotaResponse
	20, // 11: kantaloupe.dynamia.ai.api.quotas.v1alpha1.ListQuotasResponse.pagination:type_name -> kantaloupe.dynamia.ai.api.types.Pagination
	16, // 12: kantaloupe.dynamia.ai.api.quotas.v1alpha1.CreateQuotaRequest.hard:type_name -> kantaloupe.dynamia.ai.api.quotas.v1alpha1.CreateQuotaRequest.HardEntry
	17, // 13: kantaloupe.dynamia.ai.api.quotas.v1alpha1.UpdateQuotaRequest.hard:type_name -> kantaloupe.dynamia.ai.api.quotas.v1alpha1.UpdateQuotaRequest.HardEntry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_quotas_v1alpha1_quota_proto_init() }
func file_api_quotas_v1alpha1_quota_proto_init() {
	if File_api_quotas_v1alpha1_quota_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_quotas_v1alpha1_quota_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_quotas_v1alpha1_quota_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_quotas_v1alpha1_quota_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_quotas_v1alpha1_quota_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_quotas_v1alpha1_quota_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuotasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_quotas_v1alpha1_quota_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuotasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_quotas_v1alpha1_quota_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_quotas_v1alpha1_quota_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_quotas_v1alpha1_quota_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_quotas_v1alpha1_quota_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_quotas_v1alpha1_quota_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_quotas_v1alpha1_quota_proto_goTypes,
		DependencyIndexes: file_api_quotas_v1alpha1_quota_proto_depIdxs,
		MessageInfos:      file_api_quotas_v1alpha1_quota_proto_msgTypes,
	}.Build()
	File_api_quotas_v1alpha1_quota_proto = out.File
	file_api_quotas_v1alpha1_quota_proto_rawDesc = nil
	file_api_quotas_v1alpha1_quota_proto_goTypes = nil
	file_api_quotas_v1alpha1_quota_proto_depIdxs = nil
}
