// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: api/core/v1alpha1/persistentvolumeclaim.proto

package v1alpha1

import (
	types "github.com/dynamia-ai/kantaloupe/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PVCPhase int32

const (
	PVCPhase_PVC_PHASE_UNSPECIFIED PVCPhase = 0
	// used for PersistentVolumeClaims that are not yet bound
	PVCPhase_PVC_Pending PVCPhase = 1
	// used for PersistentVolumeClaims that are bound
	PVCPhase_PVC_Bound PVCPhase = 2
	// used for PersistentVolumeClaims that lost their underlying
	// PersistentVolume. The claim was bound to a PersistentVolume and this
	// volume does not exist any longer and all data on it was lost.
	PVCPhase_PVC_Lost PVCPhase = 3
)

// Enum value maps for PVCPhase.
var (
	PVCPhase_name = map[int32]string{
		0: "PVC_PHASE_UNSPECIFIED",
		1: "PVC_Pending",
		2: "PVC_Bound",
		3: "PVC_Lost",
	}
	PVCPhase_value = map[string]int32{
		"PVC_PHASE_UNSPECIFIED": 0,
		"PVC_Pending":           1,
		"PVC_Bound":             2,
		"PVC_Lost":              3,
	}
)

func (x PVCPhase) Enum() *PVCPhase {
	p := new(PVCPhase)
	*p = x
	return p
}

func (x PVCPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PVCPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_enumTypes[0].Descriptor()
}

func (PVCPhase) Type() protoreflect.EnumType {
	return &file_api_core_v1alpha1_persistentvolumeclaim_proto_enumTypes[0]
}

func (x PVCPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PVCPhase.Descriptor instead.
func (PVCPhase) EnumDescriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescGZIP(), []int{0}
}

type PersistentVolumeClaimSpec_VolumeMode int32

const (
	PersistentVolumeClaimSpec_VOLUME_MODE_UNSPECIFIED PersistentVolumeClaimSpec_VolumeMode = 0
	// PersistentVolumeBlock means the volume will not be formatted with a filesystem and will remain a raw block device.
	PersistentVolumeClaimSpec_Block PersistentVolumeClaimSpec_VolumeMode = 1
	// PersistentVolumeFilesystem means the volume will be or is formatted with a filesystem.
	PersistentVolumeClaimSpec_Filesystem PersistentVolumeClaimSpec_VolumeMode = 2
)

// Enum value maps for PersistentVolumeClaimSpec_VolumeMode.
var (
	PersistentVolumeClaimSpec_VolumeMode_name = map[int32]string{
		0: "VOLUME_MODE_UNSPECIFIED",
		1: "Block",
		2: "Filesystem",
	}
	PersistentVolumeClaimSpec_VolumeMode_value = map[string]int32{
		"VOLUME_MODE_UNSPECIFIED": 0,
		"Block":                   1,
		"Filesystem":              2,
	}
)

func (x PersistentVolumeClaimSpec_VolumeMode) Enum() *PersistentVolumeClaimSpec_VolumeMode {
	p := new(PersistentVolumeClaimSpec_VolumeMode)
	*p = x
	return p
}

func (x PersistentVolumeClaimSpec_VolumeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PersistentVolumeClaimSpec_VolumeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_enumTypes[1].Descriptor()
}

func (PersistentVolumeClaimSpec_VolumeMode) Type() protoreflect.EnumType {
	return &file_api_core_v1alpha1_persistentvolumeclaim_proto_enumTypes[1]
}

func (x PersistentVolumeClaimSpec_VolumeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PersistentVolumeClaimSpec_VolumeMode.Descriptor instead.
func (PersistentVolumeClaimSpec_VolumeMode) EnumDescriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescGZIP(), []int{1, 0}
}

// PersistentVolumeClaim represents a reference to a PersistentVolume in the same namespace.
type PersistentVolumeClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	Metadata *types.ObjectMeta `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// PersistentVolumeClaimSpec describes the common attributes of storage devices
	// and allows a Source for provider-specific attributes
	Spec *PersistentVolumeClaimSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// PersistentVolumeClaimStatus represents the status of PV claim
	Status *PersistentVolumeClaimStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PersistentVolumeClaim) Reset() {
	*x = PersistentVolumeClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentVolumeClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentVolumeClaim) ProtoMessage() {}

func (x *PersistentVolumeClaim) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentVolumeClaim.ProtoReflect.Descriptor instead.
func (*PersistentVolumeClaim) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescGZIP(), []int{0}
}

func (x *PersistentVolumeClaim) GetMetadata() *types.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PersistentVolumeClaim) GetSpec() *PersistentVolumeClaimSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PersistentVolumeClaim) GetStatus() *PersistentVolumeClaimStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices
// and allows a Source for provider-specific attributes
type PersistentVolumeClaimSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the types of access modes required
	// +optional
	AccessModes []PersistentVolumeAccessMode `protobuf:"varint,1,rep,packed,name=access_modes,json=accessModes,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeAccessMode" json:"access_modes,omitempty"`
	// A label query over volumes to consider for binding. This selector is
	// ignored when VolumeName is set
	// +optional
	Selector *types.LabelSelector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	// Resources represents the minimum resources required
	// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
	// that are lower than previous value but must still be higher than capacity recorded in the
	// status field of the claim.
	// +optional
	Resources *ResourceRequirements `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"` // defined in pod.proto
	// VolumeName is the binding reference to the PersistentVolume backing this
	// claim. When set to non-empty value Selector is not evaluated
	// +optional
	VolumeName string `protobuf:"bytes,4,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	// Name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
	// +optional
	StorageClassName string `protobuf:"bytes,5,opt,name=storage_class_name,json=storageClassName,proto3" json:"storage_class_name,omitempty"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	// +optional
	VolumeMode PersistentVolumeClaimSpec_VolumeMode `protobuf:"varint,6,opt,name=volume_mode,json=volumeMode,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimSpec_VolumeMode" json:"volume_mode,omitempty"`
	// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
	DataSource *TypedLocalObjectReference `protobuf:"bytes,7,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
	// volume is desired. This may be any object from a non-empty API group (non
	// core object) or a PersistentVolumeClaim object.
	// When this field is specified, volume binding will only succeed if the type of
	// the specified object matches some installed volume populator or dynamic
	// provisioner.
	// This field will replace the functionality of the dataSource field and as such
	// if both fields are non-empty, they must have the same value. For backwards
	// compatibility, when namespace isn't specified in dataSourceRef,
	// both fields (dataSource and dataSourceRef) will be set to the same
	// value automatically if one of them is empty and the other is non-empty.
	// When namespace is specified in dataSourceRef,
	// dataSource isn't set to the same value and must be empty.
	// There are three important differences between dataSource and dataSourceRef:
	//   - While dataSource only allows two specific types of objects, dataSourceRef
	//     allows any non-core object, as well as PersistentVolumeClaim objects.
	//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
	//     preserves all values, and generates an error if a disallowed value is
	//     specified.
	//   - While dataSource only allows local objects, dataSourceRef allows objects
	//     in any namespaces.
	//
	// (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
	// (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	// +optional
	DataSourceRef *TypedObjectReference `protobuf:"bytes,8,opt,name=data_source_ref,json=dataSourceRef,proto3" json:"data_source_ref,omitempty"`
	// The support expansion  represents this pvc weather support  expansion
	SupportExpansion bool `protobuf:"varint,9,opt,name=support_expansion,json=supportExpansion,proto3" json:"support_expansion,omitempty"`
	// The support snapshot represents this pvc weather support snapshot
	SupportSnapshot bool `protobuf:"varint,10,opt,name=support_snapshot,json=supportSnapshot,proto3" json:"support_snapshot,omitempty"`
}

func (x *PersistentVolumeClaimSpec) Reset() {
	*x = PersistentVolumeClaimSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentVolumeClaimSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentVolumeClaimSpec) ProtoMessage() {}

func (x *PersistentVolumeClaimSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentVolumeClaimSpec.ProtoReflect.Descriptor instead.
func (*PersistentVolumeClaimSpec) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescGZIP(), []int{1}
}

func (x *PersistentVolumeClaimSpec) GetAccessModes() []PersistentVolumeAccessMode {
	if x != nil {
		return x.AccessModes
	}
	return nil
}

func (x *PersistentVolumeClaimSpec) GetSelector() *types.LabelSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *PersistentVolumeClaimSpec) GetResources() *ResourceRequirements {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *PersistentVolumeClaimSpec) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *PersistentVolumeClaimSpec) GetStorageClassName() string {
	if x != nil {
		return x.StorageClassName
	}
	return ""
}

func (x *PersistentVolumeClaimSpec) GetVolumeMode() PersistentVolumeClaimSpec_VolumeMode {
	if x != nil {
		return x.VolumeMode
	}
	return PersistentVolumeClaimSpec_VOLUME_MODE_UNSPECIFIED
}

func (x *PersistentVolumeClaimSpec) GetDataSource() *TypedLocalObjectReference {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *PersistentVolumeClaimSpec) GetDataSourceRef() *TypedObjectReference {
	if x != nil {
		return x.DataSourceRef
	}
	return nil
}

func (x *PersistentVolumeClaimSpec) GetSupportExpansion() bool {
	if x != nil {
		return x.SupportExpansion
	}
	return false
}

func (x *PersistentVolumeClaimSpec) GetSupportSnapshot() bool {
	if x != nil {
		return x.SupportSnapshot
	}
	return false
}

// PersistentVolumeClaimStatus represents the status of PV claim
type PersistentVolumeClaimStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Phase represents the current phase of PersistentVolumeClaim
	// +optional
	Phase PVCPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.PVCPhase" json:"phase,omitempty"`
	// AccessModes contains all ways the volume backing the PVC can be mounted
	// +optional
	AccessModes []PersistentVolumeAccessMode `protobuf:"varint,2,rep,packed,name=access_modes,json=accessModes,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeAccessMode" json:"access_modes,omitempty"`
	// Represents the actual resources of the underlying volume
	// +optional
	Capacity *ResourceList `protobuf:"bytes,3,opt,name=capacity,proto3" json:"capacity,omitempty"` // defined in pod.proto
	// +optional
	Conditions []*PersistentVolumeClaimCondition `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// PodName represents the pod to which the PVC belongs
	PodName []string `protobuf:"bytes,5,rep,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// snapshotCount represents how many snapshot the PVC has
	SnapshotCount int32 `protobuf:"varint,6,opt,name=snapshot_count,json=snapshotCount,proto3" json:"snapshot_count,omitempty"`
}

func (x *PersistentVolumeClaimStatus) Reset() {
	*x = PersistentVolumeClaimStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentVolumeClaimStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentVolumeClaimStatus) ProtoMessage() {}

func (x *PersistentVolumeClaimStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentVolumeClaimStatus.ProtoReflect.Descriptor instead.
func (*PersistentVolumeClaimStatus) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescGZIP(), []int{2}
}

func (x *PersistentVolumeClaimStatus) GetPhase() PVCPhase {
	if x != nil {
		return x.Phase
	}
	return PVCPhase_PVC_PHASE_UNSPECIFIED
}

func (x *PersistentVolumeClaimStatus) GetAccessModes() []PersistentVolumeAccessMode {
	if x != nil {
		return x.AccessModes
	}
	return nil
}

func (x *PersistentVolumeClaimStatus) GetCapacity() *ResourceList {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *PersistentVolumeClaimStatus) GetConditions() []*PersistentVolumeClaimCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *PersistentVolumeClaimStatus) GetPodName() []string {
	if x != nil {
		return x.PodName
	}
	return nil
}

func (x *PersistentVolumeClaimStatus) GetSnapshotCount() int32 {
	if x != nil {
		return x.SnapshotCount
	}
	return 0
}

// PersistentVolumeClaimConditionType defines the condition of PV claim.
type PersistentVolumeClaimCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of this PersistentVolumeClaimCondition.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Status is the current status of PersistentVolumeClaim.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Last time we probed the condition.
	LastProbeTime int64 `protobuf:"varint,3,opt,name=last_probe_time,json=lastProbeTime,proto3" json:"last_probe_time,omitempty"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime int64 `protobuf:"varint,4,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	// The reason of PersistentVolumeClaimCondition.
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// The message of PersistentVolumeClaimCondition.
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PersistentVolumeClaimCondition) Reset() {
	*x = PersistentVolumeClaimCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentVolumeClaimCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentVolumeClaimCondition) ProtoMessage() {}

func (x *PersistentVolumeClaimCondition) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentVolumeClaimCondition.ProtoReflect.Descriptor instead.
func (*PersistentVolumeClaimCondition) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescGZIP(), []int{3}
}

func (x *PersistentVolumeClaimCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PersistentVolumeClaimCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PersistentVolumeClaimCondition) GetLastProbeTime() int64 {
	if x != nil {
		return x.LastProbeTime
	}
	return 0
}

func (x *PersistentVolumeClaimCondition) GetLastTransitionTime() int64 {
	if x != nil {
		return x.LastTransitionTime
	}
	return 0
}

func (x *PersistentVolumeClaimCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PersistentVolumeClaimCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
type TypedLocalObjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup string `protobuf:"bytes,1,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
	// Kind is the type of resource being referenced.
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name is the name of resource being referenced.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TypedLocalObjectReference) Reset() {
	*x = TypedLocalObjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedLocalObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedLocalObjectReference) ProtoMessage() {}

func (x *TypedLocalObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedLocalObjectReference.ProtoReflect.Descriptor instead.
func (*TypedLocalObjectReference) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescGZIP(), []int{4}
}

func (x *TypedLocalObjectReference) GetApiGroup() string {
	if x != nil {
		return x.ApiGroup
	}
	return ""
}

func (x *TypedLocalObjectReference) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *TypedLocalObjectReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TypedObjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	// +optional
	ApiGroup string `protobuf:"bytes,1,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
	// Kind is the type of resource being referenced
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name is the name of resource being referenced
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	// +featureGate=CrossNamespaceVolumeDataSource
	// +optional
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *TypedObjectReference) Reset() {
	*x = TypedObjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedObjectReference) ProtoMessage() {}

func (x *TypedObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedObjectReference.ProtoReflect.Descriptor instead.
func (*TypedObjectReference) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescGZIP(), []int{5}
}

func (x *TypedObjectReference) GetApiGroup() string {
	if x != nil {
		return x.ApiGroup
	}
	return ""
}

func (x *TypedObjectReference) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *TypedObjectReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypedObjectReference) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// ResourceList returns a string representation of a resource list in a human
// readable format.
type ResourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Storage is the total storage resource. Unit: byte.
	Storage string `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *ResourceList) Reset() {
	*x = ResourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceList) ProtoMessage() {}

func (x *ResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceList.ProtoReflect.Descriptor instead.
func (*ResourceList) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceList) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limits describes the maximum amount of compute resources allowed.
	// More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// +optional
	Limits *ResourceList `protobuf:"bytes,1,opt,name=limits,proto3" json:"limits,omitempty"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is
	// explicitly specified, otherwise to an implementation-defined value. More
	// info:
	// https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// +optional
	Requests *ResourceList `protobuf:"bytes,2,opt,name=requests,proto3" json:"requests,omitempty"`
}

func (x *ResourceRequirements) Reset() {
	*x = ResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirements) ProtoMessage() {}

func (x *ResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirements.ProtoReflect.Descriptor instead.
func (*ResourceRequirements) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescGZIP(), []int{7}
}

func (x *ResourceRequirements) GetLimits() *ResourceList {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ResourceRequirements) GetRequests() *ResourceList {
	if x != nil {
		return x.Requests
	}
	return nil
}

var File_api_core_v1alpha1_persistentvolumeclaim_proto protoreflect.FileDescriptor

var file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x27, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96,
	0x02, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x56, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd5, 0x06, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x66, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4a, 0x0a,
	0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b,
	0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x44, 0x0a, 0x0a, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x22,
	0xcc, 0x03, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x47, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x56, 0x43, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x51, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd8,
	0x01, 0x0a, 0x1e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x19, 0x54, 0x79, 0x70,
	0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x14, 0x54,
	0x79, 0x70, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x22, 0xb8, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2a, 0x53, 0x0a, 0x08, 0x50,
	0x56, 0x43, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x56, 0x43, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x56, 0x43, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x56, 0x43, 0x5f, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x56, 0x43, 0x5f, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0x03,
	0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescOnce sync.Once
	file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescData = file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDesc
)

func file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescGZIP() []byte {
	file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescOnce.Do(func() {
		file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescData)
	})
	return file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDescData
}

var file_api_core_v1alpha1_persistentvolumeclaim_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_core_v1alpha1_persistentvolumeclaim_proto_goTypes = []interface{}{
	(PVCPhase)(0), // 0: kantaloupe.dynamia.ai.api.core.v1alpha1.PVCPhase
	(PersistentVolumeClaimSpec_VolumeMode)(0), // 1: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimSpec.VolumeMode
	(*PersistentVolumeClaim)(nil),             // 2: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaim
	(*PersistentVolumeClaimSpec)(nil),         // 3: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimSpec
	(*PersistentVolumeClaimStatus)(nil),       // 4: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimStatus
	(*PersistentVolumeClaimCondition)(nil),    // 5: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimCondition
	(*TypedLocalObjectReference)(nil),         // 6: kantaloupe.dynamia.ai.api.core.v1alpha1.TypedLocalObjectReference
	(*TypedObjectReference)(nil),              // 7: kantaloupe.dynamia.ai.api.core.v1alpha1.TypedObjectReference
	(*ResourceList)(nil),                      // 8: kantaloupe.dynamia.ai.api.core.v1alpha1.ResourceList
	(*ResourceRequirements)(nil),              // 9: kantaloupe.dynamia.ai.api.core.v1alpha1.ResourceRequirements
	(*types.ObjectMeta)(nil),                  // 10: kantaloupe.dynamia.ai.api.types.ObjectMeta
	(PersistentVolumeAccessMode)(0),           // 11: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeAccessMode
	(*types.LabelSelector)(nil),               // 12: kantaloupe.dynamia.ai.api.types.LabelSelector
}
var file_api_core_v1alpha1_persistentvolumeclaim_proto_depIdxs = []int32{
	10, // 0: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaim.metadata:type_name -> kantaloupe.dynamia.ai.api.types.ObjectMeta
	3,  // 1: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaim.spec:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimSpec
	4,  // 2: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaim.status:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimStatus
	11, // 3: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimSpec.access_modes:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeAccessMode
	12, // 4: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimSpec.selector:type_name -> kantaloupe.dynamia.ai.api.types.LabelSelector
	9,  // 5: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimSpec.resources:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.ResourceRequirements
	1,  // 6: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimSpec.volume_mode:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimSpec.VolumeMode
	6,  // 7: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimSpec.data_source:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.TypedLocalObjectReference
	7,  // 8: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimSpec.data_source_ref:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.TypedObjectReference
	0,  // 9: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimStatus.phase:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PVCPhase
	11, // 10: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimStatus.access_modes:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeAccessMode
	8,  // 11: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimStatus.capacity:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.ResourceList
	5,  // 12: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimStatus.conditions:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeClaimCondition
	8,  // 13: kantaloupe.dynamia.ai.api.core.v1alpha1.ResourceRequirements.limits:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.ResourceList
	8,  // 14: kantaloupe.dynamia.ai.api.core.v1alpha1.ResourceRequirements.requests:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.ResourceList
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_api_core_v1alpha1_persistentvolumeclaim_proto_init() }
func file_api_core_v1alpha1_persistentvolumeclaim_proto_init() {
	if File_api_core_v1alpha1_persistentvolumeclaim_proto != nil {
		return
	}
	file_api_core_v1alpha1_persistentvolume_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentVolumeClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentVolumeClaimSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentVolumeClaimStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentVolumeClaimCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedLocalObjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedObjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_core_v1alpha1_persistentvolumeclaim_proto_goTypes,
		DependencyIndexes: file_api_core_v1alpha1_persistentvolumeclaim_proto_depIdxs,
		EnumInfos:         file_api_core_v1alpha1_persistentvolumeclaim_proto_enumTypes,
		MessageInfos:      file_api_core_v1alpha1_persistentvolumeclaim_proto_msgTypes,
	}.Build()
	File_api_core_v1alpha1_persistentvolumeclaim_proto = out.File
	file_api_core_v1alpha1_persistentvolumeclaim_proto_rawDesc = nil
	file_api_core_v1alpha1_persistentvolumeclaim_proto_goTypes = nil
	file_api_core_v1alpha1_persistentvolumeclaim_proto_depIdxs = nil
}
