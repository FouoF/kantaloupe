// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: api/core/v1alpha1/node.proto

package v1alpha1

import (
	types "github.com/dynamia-ai/kantaloupe/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Valid effects are NoSchedule, PreferNoSchedule, and NoExecute.
type TaintEffect int32

const (
	// This is only a meaningless placeholder, to avoid zero not return.
	TaintEffect_TAINT_EFFECT_UNSPECIFIED TaintEffect = 0
	// NoSchedule tries to avoid scheduling pods to nodes where they can't
	// tolerate taints.
	TaintEffect_NoSchedule TaintEffect = 1
	// This is not mandatory tries to avoid scheduling pods to nodes.
	TaintEffect_PreferNoSchedule TaintEffect = 2
	// NoExecute is not assign pod  to or evicted pod from the node.
	TaintEffect_NoExecute TaintEffect = 3
)

// Enum value maps for TaintEffect.
var (
	TaintEffect_name = map[int32]string{
		0: "TAINT_EFFECT_UNSPECIFIED",
		1: "NoSchedule",
		2: "PreferNoSchedule",
		3: "NoExecute",
	}
	TaintEffect_value = map[string]int32{
		"TAINT_EFFECT_UNSPECIFIED": 0,
		"NoSchedule":               1,
		"PreferNoSchedule":         2,
		"NoExecute":                3,
	}
)

func (x TaintEffect) Enum() *TaintEffect {
	p := new(TaintEffect)
	*p = x
	return p
}

func (x TaintEffect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaintEffect) Descriptor() protoreflect.EnumDescriptor {
	return file_api_core_v1alpha1_node_proto_enumTypes[0].Descriptor()
}

func (TaintEffect) Type() protoreflect.EnumType {
	return &file_api_core_v1alpha1_node_proto_enumTypes[0]
}

func (x TaintEffect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaintEffect.Descriptor instead.
func (TaintEffect) EnumDescriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{0}
}

// Phase includes Ready, NotReady, and Unknown.
type NodePhase int32

const (
	// This is only a meaningless placeholder, to avoid zero not return.
	NodePhase_NODE_PHASE_UNSPECIFIED NodePhase = 0
	// The node is ready to work.
	NodePhase_Ready NodePhase = 1
	// The node is not ready.
	NodePhase_Not_Ready NodePhase = 2
	// The node state is unknown.
	NodePhase_Unknown NodePhase = 3
)

// Enum value maps for NodePhase.
var (
	NodePhase_name = map[int32]string{
		0: "NODE_PHASE_UNSPECIFIED",
		1: "Ready",
		2: "Not_Ready",
		3: "Unknown",
	}
	NodePhase_value = map[string]int32{
		"NODE_PHASE_UNSPECIFIED": 0,
		"Ready":                  1,
		"Not_Ready":              2,
		"Unknown":                3,
	}
)

func (x NodePhase) Enum() *NodePhase {
	p := new(NodePhase)
	*p = x
	return p
}

func (x NodePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_api_core_v1alpha1_node_proto_enumTypes[1].Descriptor()
}

func (NodePhase) Type() protoreflect.EnumType {
	return &file_api_core_v1alpha1_node_proto_enumTypes[1]
}

func (x NodePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodePhase.Descriptor instead.
func (NodePhase) EnumDescriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{1}
}

// Role includes control-plane and worker.
type Role int32

const (
	// This is only a meaningless placeholder, to avoid zero not return.
	Role_NODE_ROLE_UNSPECIFIED Role = 0
	// The control plane manages the worker nodes and the Pods in the cluster.
	Role_CONTROL_PLANE Role = 1
	// The worker node(s) host the Pods that are the components of the
	// application workload.
	Role_WORKER Role = 2
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "NODE_ROLE_UNSPECIFIED",
		1: "CONTROL_PLANE",
		2: "WORKER",
	}
	Role_value = map[string]int32{
		"NODE_ROLE_UNSPECIFIED": 0,
		"CONTROL_PLANE":         1,
		"WORKER":                2,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_api_core_v1alpha1_node_proto_enumTypes[2].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_api_core_v1alpha1_node_proto_enumTypes[2]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{2}
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	Metadata *types.ObjectMeta `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// NodeSpec defines the behavior of a node.
	Spec *NodeSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Most recently observed status of the node.
	// Populated by the system.
	Status *NodeStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetMetadata() *types.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Node) GetSpec() *NodeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Node) GetStatus() *NodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type NodeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PodCIDR represents the pod IP range assigned to the node.
	PodCIDR string `protobuf:"bytes,1,opt,name=podCIDR,proto3" json:"podCIDR,omitempty"`
	// Unschedulable controls node schedulability of new pods. By default, node is
	// schedulable.
	Unschedulable bool `protobuf:"varint,2,opt,name=unschedulable,proto3" json:"unschedulable,omitempty"`
	// If specified, the node's taints.
	Taints []*Taint `protobuf:"bytes,3,rep,name=taints,proto3" json:"taints,omitempty"`
}

func (x *NodeSpec) Reset() {
	*x = NodeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSpec) ProtoMessage() {}

func (x *NodeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSpec.ProtoReflect.Descriptor instead.
func (*NodeSpec) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{1}
}

func (x *NodeSpec) GetPodCIDR() string {
	if x != nil {
		return x.PodCIDR
	}
	return ""
}

func (x *NodeSpec) GetUnschedulable() bool {
	if x != nil {
		return x.Unschedulable
	}
	return false
}

func (x *NodeSpec) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

type Taint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The taint key to be applied to a node.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The taint value corresponding to the taint key.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Valid effects are NoSchedule, PreferNoSchedule, and NoExecute.
	Effect TaintEffect `protobuf:"varint,3,opt,name=effect,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.TaintEffect" json:"effect,omitempty"`
}

func (x *Taint) Reset() {
	*x = Taint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taint) ProtoMessage() {}

func (x *Taint) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taint.ProtoReflect.Descriptor instead.
func (*Taint) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{2}
}

func (x *Taint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Taint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Taint) GetEffect() TaintEffect {
	if x != nil {
		return x.Effect
	}
	return TaintEffect_TAINT_EFFECT_UNSPECIFIED
}

// NodeStatus is information about the current status of a node.
type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status represents the current information/status of node.
	Status *NodeStatus_Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// IP Address reachable to the node.
	Addresses []*NodeAddress `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// CpuCapacity is the total cpu of the node. Unit: m.
	CpuCapacity int64 `protobuf:"varint,3,opt,name=cpu_capacity,json=cpuCapacity,proto3" json:"cpu_capacity,omitempty"`
	// CpuAllocated is the total pod cpu request on the node. Unit: %.
	CpuAllocated float64 `protobuf:"fixed64,4,opt,name=cpu_allocated,json=cpuAllocated,proto3" json:"cpu_allocated,omitempty"`
	// CpuUsage is the cpu usage on the node. Unit: %.
	CpuUsage float64 `protobuf:"fixed64,5,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	// MemoryCapacity is the total memory of the node. Unit: byte.
	MemoryCapacity int64 `protobuf:"varint,6,opt,name=memory_capacity,json=memoryCapacity,proto3" json:"memory_capacity,omitempty"`
	// MemoryAllocated is the total pod memory request on the node. Unit: %.
	MemoryAllocated float64 `protobuf:"fixed64,7,opt,name=memory_allocated,json=memoryAllocated,proto3" json:"memory_allocated,omitempty"`
	// MemoryUsage is the memory usage on the node. Unit: %.
	MemoryUsage float64 `protobuf:"fixed64,8,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	// gpu_count is gpu number.
	GpuCount int32 `protobuf:"varint,9,opt,name=gpu_count,json=gpuCount,proto3" json:"gpu_count,omitempty"`
	// gpu_total is gpu total core that can be allocated.
	GpuCoreTotal float64 `protobuf:"fixed64,10,opt,name=gpu_core_total,json=gpuCoreTotal,proto3" json:"gpu_core_total,omitempty"`
	// gpu_allocated is gpu allocated number.
	GpuCoreAllocated float64 `protobuf:"fixed64,11,opt,name=gpu_core_allocated,json=gpuCoreAllocated,proto3" json:"gpu_core_allocated,omitempty"`
	// gpu_core_usage is the usage rate of gpu
	GpuCoreUsage float64 `protobuf:"fixed64,12,opt,name=gpu_core_usage,json=gpuCoreUsage,proto3" json:"gpu_core_usage,omitempty"`
	// gpu_memory_total is all gpu memory number with node. Unit: byte.
	GpuMemoryTotal int64 `protobuf:"varint,13,opt,name=gpu_memory_total,json=gpuMemoryTotal,proto3" json:"gpu_memory_total,omitempty"`
	// gpu_memory_allocatable is allocatable gpu memory number with node. Unit: byte
	GpuMemoryAllocatable int64 `protobuf:"varint,14,opt,name=gpu_memory_allocatable,json=gpuMemoryAllocatable,proto3" json:"gpu_memory_allocatable,omitempty"`
	// gpu_memory_allocated is allocated gpu memory number with node. Unit: byte
	GpuMemoryAllocated int64 `protobuf:"varint,15,opt,name=gpu_memory_allocated,json=gpuMemoryAllocated,proto3" json:"gpu_memory_allocated,omitempty"`
	// gpu_memory_usage is the usage rate of gpu video memory
	GpuMemoryUsage int64 `protobuf:"varint,16,opt,name=gpu_memory_usage,json=gpuMemoryUsage,proto3" json:"gpu_memory_usage,omitempty"`
	// Set of ids/uuids to uniquely identify the node.
	SystemInfo *NodeSystemInfo `protobuf:"bytes,17,opt,name=system_info,json=systemInfo,proto3" json:"system_info,omitempty"`
	// The roles of current node.
	Roles []Role `protobuf:"varint,18,rep,packed,name=roles,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.Role" json:"roles,omitempty"`
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{3}
}

func (x *NodeStatus) GetStatus() *NodeStatus_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *NodeStatus) GetAddresses() []*NodeAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *NodeStatus) GetCpuCapacity() int64 {
	if x != nil {
		return x.CpuCapacity
	}
	return 0
}

func (x *NodeStatus) GetCpuAllocated() float64 {
	if x != nil {
		return x.CpuAllocated
	}
	return 0
}

func (x *NodeStatus) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *NodeStatus) GetMemoryCapacity() int64 {
	if x != nil {
		return x.MemoryCapacity
	}
	return 0
}

func (x *NodeStatus) GetMemoryAllocated() float64 {
	if x != nil {
		return x.MemoryAllocated
	}
	return 0
}

func (x *NodeStatus) GetMemoryUsage() float64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *NodeStatus) GetGpuCount() int32 {
	if x != nil {
		return x.GpuCount
	}
	return 0
}

func (x *NodeStatus) GetGpuCoreTotal() float64 {
	if x != nil {
		return x.GpuCoreTotal
	}
	return 0
}

func (x *NodeStatus) GetGpuCoreAllocated() float64 {
	if x != nil {
		return x.GpuCoreAllocated
	}
	return 0
}

func (x *NodeStatus) GetGpuCoreUsage() float64 {
	if x != nil {
		return x.GpuCoreUsage
	}
	return 0
}

func (x *NodeStatus) GetGpuMemoryTotal() int64 {
	if x != nil {
		return x.GpuMemoryTotal
	}
	return 0
}

func (x *NodeStatus) GetGpuMemoryAllocatable() int64 {
	if x != nil {
		return x.GpuMemoryAllocatable
	}
	return 0
}

func (x *NodeStatus) GetGpuMemoryAllocated() int64 {
	if x != nil {
		return x.GpuMemoryAllocated
	}
	return 0
}

func (x *NodeStatus) GetGpuMemoryUsage() int64 {
	if x != nil {
		return x.GpuMemoryUsage
	}
	return 0
}

func (x *NodeStatus) GetSystemInfo() *NodeSystemInfo {
	if x != nil {
		return x.SystemInfo
	}
	return nil
}

func (x *NodeStatus) GetRoles() []Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

// NodeCondition contains condition information for a node.
type NodeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of node condition. The built-in set of conditions are: Ready,
	// MemoryPressure, DiskPressure, PIDPressure,
	// NetworkUnavailable, and SchedulingDisabled.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status types.ConditionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=kantaloupe.dynamia.ai.api.types.ConditionStatus" json:"status,omitempty"`
	// (brief) reason for the condition's last transition.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Human readable message indicating details about last transition.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// The last time this condition was updated.
	UpdateTimestamp string `protobuf:"bytes,5,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
}

func (x *NodeCondition) Reset() {
	*x = NodeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCondition) ProtoMessage() {}

func (x *NodeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCondition.ProtoReflect.Descriptor instead.
func (*NodeCondition) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{4}
}

func (x *NodeCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NodeCondition) GetStatus() types.ConditionStatus {
	if x != nil {
		return x.Status
	}
	return types.ConditionStatus(0)
}

func (x *NodeCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *NodeCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NodeCondition) GetUpdateTimestamp() string {
	if x != nil {
		return x.UpdateTimestamp
	}
	return ""
}

type NodeSystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kernel Version reported by the node from 'uname -r'
	// (e.g. 3.16.0-0.bpo.4-amd64).
	KernelVersion string `protobuf:"bytes,1,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7
	// (wheezy)).
	OsImage string `protobuf:"bytes,2,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty"`
	// ContainerRuntime Version reported by the node through runtime remote API
	// (e.g. docker://1.5.0).
	ContainerRuntimeVersion string `protobuf:"bytes,3,opt,name=container_runtime_version,json=containerRuntimeVersion,proto3" json:"container_runtime_version,omitempty"`
	// Kubelet Version reported by the node.
	KubeletVersion string `protobuf:"bytes,4,opt,name=kubelet_version,json=kubeletVersion,proto3" json:"kubelet_version,omitempty"`
	// The Architecture reported by the node.
	Architecture  string `protobuf:"bytes,5,opt,name=architecture,proto3" json:"architecture,omitempty"`
	CudaVersion   string `protobuf:"bytes,6,opt,name=cuda_version,json=cudaVersion,proto3" json:"cuda_version,omitempty"`
	NvidiaVersion string `protobuf:"bytes,7,opt,name=nvidia_version,json=nvidiaVersion,proto3" json:"nvidia_version,omitempty"`
}

func (x *NodeSystemInfo) Reset() {
	*x = NodeSystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSystemInfo) ProtoMessage() {}

func (x *NodeSystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSystemInfo.ProtoReflect.Descriptor instead.
func (*NodeSystemInfo) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{5}
}

func (x *NodeSystemInfo) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *NodeSystemInfo) GetOsImage() string {
	if x != nil {
		return x.OsImage
	}
	return ""
}

func (x *NodeSystemInfo) GetContainerRuntimeVersion() string {
	if x != nil {
		return x.ContainerRuntimeVersion
	}
	return ""
}

func (x *NodeSystemInfo) GetKubeletVersion() string {
	if x != nil {
		return x.KubeletVersion
	}
	return ""
}

func (x *NodeSystemInfo) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *NodeSystemInfo) GetCudaVersion() string {
	if x != nil {
		return x.CudaVersion
	}
	return ""
}

func (x *NodeSystemInfo) GetNvidiaVersion() string {
	if x != nil {
		return x.NvidiaVersion
	}
	return ""
}

// NodeAddress contains information for the instance's address.
// The node addresses returned here will be set on the node's status.addresses
// field.
type NodeAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is a array used for frontend filter.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// IP Address reachable to the node.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *NodeAddress) Reset() {
	*x = NodeAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAddress) ProtoMessage() {}

func (x *NodeAddress) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAddress.ProtoReflect.Descriptor instead.
func (*NodeAddress) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{6}
}

func (x *NodeAddress) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NodeAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Get Nodes information List.
type ListNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the user-specified identifier.
	// This field may not be updated.
	Cluster string    `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Name    string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Role    Role      `protobuf:"varint,3,opt,name=role,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.Role" json:"role,omitempty"`
	Phase   NodePhase `protobuf:"varint,4,opt,name=phase,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.NodePhase" json:"phase,omitempty"`
	// Page requested.
	Page int32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	// Size per page requested.
	PageSize int32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// sort_option determines the cluster list order reference.
	SortOption *types.SortOption `protobuf:"bytes,7,opt,name=sort_option,json=sortOption,proto3" json:"sort_option,omitempty"`
}

func (x *ListNodesRequest) Reset() {
	*x = ListNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesRequest) ProtoMessage() {}

func (x *ListNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesRequest.ProtoReflect.Descriptor instead.
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{7}
}

func (x *ListNodesRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ListNodesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListNodesRequest) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_NODE_ROLE_UNSPECIFIED
}

func (x *ListNodesRequest) GetPhase() NodePhase {
	if x != nil {
		return x.Phase
	}
	return NodePhase_NODE_PHASE_UNSPECIFIED
}

func (x *ListNodesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListNodesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNodesRequest) GetSortOption() *types.SortOption {
	if x != nil {
		return x.SortOption
	}
	return nil
}

// Nodes information List.
type ListNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data The data field is the YAML details
	Items []*Node `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Pagination returned contains current page, size, and total.
	Pagination *types.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListNodesResponse) Reset() {
	*x = ListNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesResponse) ProtoMessage() {}

func (x *ListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{8}
}

func (x *ListNodesResponse) GetItems() []*Node {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListNodesResponse) GetPagination() *types.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// GetNodeRequest returns node information.
type GetNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name is the user-specified identifier.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNodeRequest) Reset() {
	*x = GetNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeRequest) ProtoMessage() {}

func (x *GetNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeRequest.ProtoReflect.Descriptor instead.
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{9}
}

func (x *GetNodeRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GetNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// PutNodeLabels put node's labels.
type PutNodeLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster represents which cluster the node belongs to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Node name.
	Node string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// the labels of node.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PutNodeLabelsRequest) Reset() {
	*x = PutNodeLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutNodeLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutNodeLabelsRequest) ProtoMessage() {}

func (x *PutNodeLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutNodeLabelsRequest.ProtoReflect.Descriptor instead.
func (*PutNodeLabelsRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{10}
}

func (x *PutNodeLabelsRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *PutNodeLabelsRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *PutNodeLabelsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type PutNodeLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PutNodeLabelsResponse) Reset() {
	*x = PutNodeLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutNodeLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutNodeLabelsResponse) ProtoMessage() {}

func (x *PutNodeLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutNodeLabelsResponse.ProtoReflect.Descriptor instead.
func (*PutNodeLabelsResponse) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{11}
}

func (x *PutNodeLabelsResponse) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// PutNodeTaints put node's taints.
type PutNodeTaintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// // Cluster the specified node belongs to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Node name.
	Node string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// If specified, the node's taints.
	Taints []*Taint `protobuf:"bytes,3,rep,name=taints,proto3" json:"taints,omitempty"`
}

func (x *PutNodeTaintsRequest) Reset() {
	*x = PutNodeTaintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutNodeTaintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutNodeTaintsRequest) ProtoMessage() {}

func (x *PutNodeTaintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutNodeTaintsRequest.ProtoReflect.Descriptor instead.
func (*PutNodeTaintsRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{12}
}

func (x *PutNodeTaintsRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *PutNodeTaintsRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *PutNodeTaintsRequest) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

// PutNodeTaintsResponse returns node's taints.
type PutNodeTaintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Taints []*Taint `protobuf:"bytes,1,rep,name=taints,proto3" json:"taints,omitempty"`
}

func (x *PutNodeTaintsResponse) Reset() {
	*x = PutNodeTaintsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutNodeTaintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutNodeTaintsResponse) ProtoMessage() {}

func (x *PutNodeTaintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutNodeTaintsResponse.ProtoReflect.Descriptor instead.
func (*PutNodeTaintsResponse) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{13}
}

func (x *PutNodeTaintsResponse) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

type UpdateNodeAnnotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster the specified node belongs to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Node name.
	Node string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// Annotations requested.
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateNodeAnnotationsRequest) Reset() {
	*x = UpdateNodeAnnotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeAnnotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeAnnotationsRequest) ProtoMessage() {}

func (x *UpdateNodeAnnotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeAnnotationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeAnnotationsRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateNodeAnnotationsRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *UpdateNodeAnnotationsRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *UpdateNodeAnnotationsRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type UpdateNodeAnnotationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Annotations returned.
	Annotations map[string]string `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateNodeAnnotationsResponse) Reset() {
	*x = UpdateNodeAnnotationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeAnnotationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeAnnotationsResponse) ProtoMessage() {}

func (x *UpdateNodeAnnotationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeAnnotationsResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeAnnotationsResponse) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateNodeAnnotationsResponse) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Get the node information which is unschedulable.
type ScheduleNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster the specified node belongs to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Node name.
	Node string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *ScheduleNodeRequest) Reset() {
	*x = ScheduleNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleNodeRequest) ProtoMessage() {}

func (x *ScheduleNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleNodeRequest.ProtoReflect.Descriptor instead.
func (*ScheduleNodeRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{16}
}

func (x *ScheduleNodeRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ScheduleNodeRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

// Status is the current observed node condition.
type NodeStatus_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase NodePhase `protobuf:"varint,1,opt,name=phase,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.NodePhase" json:"phase,omitempty"`
	// NodeCondition contains condition information for a node.
	Conditions []*NodeCondition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *NodeStatus_Status) Reset() {
	*x = NodeStatus_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_node_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus_Status) ProtoMessage() {}

func (x *NodeStatus_Status) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_node_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus_Status.ProtoReflect.Descriptor instead.
func (*NodeStatus_Status) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_node_proto_rawDescGZIP(), []int{3, 0}
}

func (x *NodeStatus_Status) GetPhase() NodePhase {
	if x != nil {
		return x.Phase
	}
	return NodePhase_NODE_PHASE_UNSPECIFIED
}

func (x *NodeStatus_Status) GetConditions() []*NodeCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

var File_api_core_v1alpha1_node_proto protoreflect.FileDescriptor

var file_api_core_v1alpha1_node_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27,
	0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe3, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x43, 0x49, 0x44, 0x52, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x43, 0x49, 0x44, 0x52, 0x12, 0x24, 0x0a,
	0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x05, 0x54,
	0x61, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6b,
	0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0xaf, 0x08, 0x0a, 0x0a, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x70, 0x75,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x70,
	0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2c, 0x0a, 0x12, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x67, 0x70,
	0x75, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34,
	0x0a, 0x16, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x58, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75,
	0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x1a,
	0xaa, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc9, 0x01, 0x0a,
	0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x75, 0x62,
	0x65, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x64, 0x61, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75,
	0x64, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x3b, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xcc, 0x02,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4c,
	0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6b, 0x61,
	0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x50, 0x75,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x74, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0x5f, 0x0a, 0x15, 0x50, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x74, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x78, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f,
	0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x2a, 0x60, 0x0a,
	0x0b, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x10, 0x03, 0x2a,
	0x4e, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x03, 0x2a,
	0x40, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4c,
	0x41, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10,
	0x02, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_core_v1alpha1_node_proto_rawDescOnce sync.Once
	file_api_core_v1alpha1_node_proto_rawDescData = file_api_core_v1alpha1_node_proto_rawDesc
)

func file_api_core_v1alpha1_node_proto_rawDescGZIP() []byte {
	file_api_core_v1alpha1_node_proto_rawDescOnce.Do(func() {
		file_api_core_v1alpha1_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_core_v1alpha1_node_proto_rawDescData)
	})
	return file_api_core_v1alpha1_node_proto_rawDescData
}

var file_api_core_v1alpha1_node_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_core_v1alpha1_node_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_core_v1alpha1_node_proto_goTypes = []interface{}{
	(TaintEffect)(0),                      // 0: kantaloupe.dynamia.ai.api.core.v1alpha1.TaintEffect
	(NodePhase)(0),                        // 1: kantaloupe.dynamia.ai.api.core.v1alpha1.NodePhase
	(Role)(0),                             // 2: kantaloupe.dynamia.ai.api.core.v1alpha1.Role
	(*Node)(nil),                          // 3: kantaloupe.dynamia.ai.api.core.v1alpha1.Node
	(*NodeSpec)(nil),                      // 4: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeSpec
	(*Taint)(nil),                         // 5: kantaloupe.dynamia.ai.api.core.v1alpha1.Taint
	(*NodeStatus)(nil),                    // 6: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeStatus
	(*NodeCondition)(nil),                 // 7: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeCondition
	(*NodeSystemInfo)(nil),                // 8: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeSystemInfo
	(*NodeAddress)(nil),                   // 9: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeAddress
	(*ListNodesRequest)(nil),              // 10: kantaloupe.dynamia.ai.api.core.v1alpha1.ListNodesRequest
	(*ListNodesResponse)(nil),             // 11: kantaloupe.dynamia.ai.api.core.v1alpha1.ListNodesResponse
	(*GetNodeRequest)(nil),                // 12: kantaloupe.dynamia.ai.api.core.v1alpha1.GetNodeRequest
	(*PutNodeLabelsRequest)(nil),          // 13: kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeLabelsRequest
	(*PutNodeLabelsResponse)(nil),         // 14: kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeLabelsResponse
	(*PutNodeTaintsRequest)(nil),          // 15: kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeTaintsRequest
	(*PutNodeTaintsResponse)(nil),         // 16: kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeTaintsResponse
	(*UpdateNodeAnnotationsRequest)(nil),  // 17: kantaloupe.dynamia.ai.api.core.v1alpha1.UpdateNodeAnnotationsRequest
	(*UpdateNodeAnnotationsResponse)(nil), // 18: kantaloupe.dynamia.ai.api.core.v1alpha1.UpdateNodeAnnotationsResponse
	(*ScheduleNodeRequest)(nil),           // 19: kantaloupe.dynamia.ai.api.core.v1alpha1.ScheduleNodeRequest
	(*NodeStatus_Status)(nil),             // 20: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeStatus.Status
	nil,                                   // 21: kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeLabelsRequest.LabelsEntry
	nil,                                   // 22: kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeLabelsResponse.LabelsEntry
	nil,                                   // 23: kantaloupe.dynamia.ai.api.core.v1alpha1.UpdateNodeAnnotationsRequest.AnnotationsEntry
	nil,                                   // 24: kantaloupe.dynamia.ai.api.core.v1alpha1.UpdateNodeAnnotationsResponse.AnnotationsEntry
	(*types.ObjectMeta)(nil),              // 25: kantaloupe.dynamia.ai.api.types.ObjectMeta
	(types.ConditionStatus)(0),            // 26: kantaloupe.dynamia.ai.api.types.ConditionStatus
	(*types.SortOption)(nil),              // 27: kantaloupe.dynamia.ai.api.types.SortOption
	(*types.Pagination)(nil),              // 28: kantaloupe.dynamia.ai.api.types.Pagination
}
var file_api_core_v1alpha1_node_proto_depIdxs = []int32{
	25, // 0: kantaloupe.dynamia.ai.api.core.v1alpha1.Node.metadata:type_name -> kantaloupe.dynamia.ai.api.types.ObjectMeta
	4,  // 1: kantaloupe.dynamia.ai.api.core.v1alpha1.Node.spec:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.NodeSpec
	6,  // 2: kantaloupe.dynamia.ai.api.core.v1alpha1.Node.status:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.NodeStatus
	5,  // 3: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeSpec.taints:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.Taint
	0,  // 4: kantaloupe.dynamia.ai.api.core.v1alpha1.Taint.effect:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.TaintEffect
	20, // 5: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeStatus.status:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.NodeStatus.Status
	9,  // 6: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeStatus.addresses:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.NodeAddress
	8,  // 7: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeStatus.system_info:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.NodeSystemInfo
	2,  // 8: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeStatus.roles:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.Role
	26, // 9: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeCondition.status:type_name -> kantaloupe.dynamia.ai.api.types.ConditionStatus
	2,  // 10: kantaloupe.dynamia.ai.api.core.v1alpha1.ListNodesRequest.role:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.Role
	1,  // 11: kantaloupe.dynamia.ai.api.core.v1alpha1.ListNodesRequest.phase:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.NodePhase
	27, // 12: kantaloupe.dynamia.ai.api.core.v1alpha1.ListNodesRequest.sort_option:type_name -> kantaloupe.dynamia.ai.api.types.SortOption
	3,  // 13: kantaloupe.dynamia.ai.api.core.v1alpha1.ListNodesResponse.items:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.Node
	28, // 14: kantaloupe.dynamia.ai.api.core.v1alpha1.ListNodesResponse.pagination:type_name -> kantaloupe.dynamia.ai.api.types.Pagination
	21, // 15: kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeLabelsRequest.labels:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeLabelsRequest.LabelsEntry
	22, // 16: kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeLabelsResponse.labels:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeLabelsResponse.LabelsEntry
	5,  // 17: kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeTaintsRequest.taints:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.Taint
	5,  // 18: kantaloupe.dynamia.ai.api.core.v1alpha1.PutNodeTaintsResponse.taints:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.Taint
	23, // 19: kantaloupe.dynamia.ai.api.core.v1alpha1.UpdateNodeAnnotationsRequest.annotations:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.UpdateNodeAnnotationsRequest.AnnotationsEntry
	24, // 20: kantaloupe.dynamia.ai.api.core.v1alpha1.UpdateNodeAnnotationsResponse.annotations:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.UpdateNodeAnnotationsResponse.AnnotationsEntry
	1,  // 21: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeStatus.Status.phase:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.NodePhase
	7,  // 22: kantaloupe.dynamia.ai.api.core.v1alpha1.NodeStatus.Status.conditions:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.NodeCondition
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_core_v1alpha1_node_proto_init() }
func file_api_core_v1alpha1_node_proto_init() {
	if File_api_core_v1alpha1_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_core_v1alpha1_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutNodeLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutNodeLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutNodeTaintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutNodeTaintsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeAnnotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeAnnotationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_node_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_core_v1alpha1_node_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_core_v1alpha1_node_proto_goTypes,
		DependencyIndexes: file_api_core_v1alpha1_node_proto_depIdxs,
		EnumInfos:         file_api_core_v1alpha1_node_proto_enumTypes,
		MessageInfos:      file_api_core_v1alpha1_node_proto_msgTypes,
	}.Build()
	File_api_core_v1alpha1_node_proto = out.File
	file_api_core_v1alpha1_node_proto_rawDesc = nil
	file_api_core_v1alpha1_node_proto_goTypes = nil
	file_api_core_v1alpha1_node_proto_depIdxs = nil
}
