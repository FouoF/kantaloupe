// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: api/core/v1alpha1/persistentvolume.proto

package v1alpha1

import (
	types "github.com/dynamia-ai/kantaloupe/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PersistentVolumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state.
type PersistentVolumeMode int32

const (
	// This is only a meaningless placeholder, to avoid zero not return.
	PersistentVolumeMode_PERSISTENT_VOLUME_MODE_UNSPECIFIED PersistentVolumeMode = 0
	// Block means the volume will not be formatted with a filesystem and will remain a raw block device.
	PersistentVolumeMode_Block PersistentVolumeMode = 1
	// Filesystem means the volume will be or is formatted with a filesystem.
	PersistentVolumeMode_Filesystem PersistentVolumeMode = 2
)

// Enum value maps for PersistentVolumeMode.
var (
	PersistentVolumeMode_name = map[int32]string{
		0: "PERSISTENT_VOLUME_MODE_UNSPECIFIED",
		1: "Block",
		2: "Filesystem",
	}
	PersistentVolumeMode_value = map[string]int32{
		"PERSISTENT_VOLUME_MODE_UNSPECIFIED": 0,
		"Block":                              1,
		"Filesystem":                         2,
	}
)

func (x PersistentVolumeMode) Enum() *PersistentVolumeMode {
	p := new(PersistentVolumeMode)
	*p = x
	return p
}

func (x PersistentVolumeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PersistentVolumeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_core_v1alpha1_persistentvolume_proto_enumTypes[0].Descriptor()
}

func (PersistentVolumeMode) Type() protoreflect.EnumType {
	return &file_api_core_v1alpha1_persistentvolume_proto_enumTypes[0]
}

func (x PersistentVolumeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PersistentVolumeMode.Descriptor instead.
func (PersistentVolumeMode) EnumDescriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{0}
}

// PersistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim.
type PersistentVolumeReclaimPolicy int32

const (
	// This is only a meaningless placeholder, to avoid zero not return.
	PersistentVolumeReclaimPolicy_PERSISTENT_VOLUME_RECLAIM_POLICY_UNSPECIFIED PersistentVolumeReclaimPolicy = 0
	// Recycle means the volume will be recycled back into the pool of unbound persistent volumes on release from its claim.
	// The volume plugin must support Recycling.
	PersistentVolumeReclaimPolicy_Recycle PersistentVolumeReclaimPolicy = 1
	// Delete means the volume will be deleted from Kubernetes on release from its claim.
	// The volume plugin must support Deletion.
	PersistentVolumeReclaimPolicy_Delete PersistentVolumeReclaimPolicy = 2
	// Retain means the volume will be left in its current phase (Released) for manual reclamation by the administrator.
	// The default policy is Retain.
	PersistentVolumeReclaimPolicy_Retain PersistentVolumeReclaimPolicy = 3
)

// Enum value maps for PersistentVolumeReclaimPolicy.
var (
	PersistentVolumeReclaimPolicy_name = map[int32]string{
		0: "PERSISTENT_VOLUME_RECLAIM_POLICY_UNSPECIFIED",
		1: "Recycle",
		2: "Delete",
		3: "Retain",
	}
	PersistentVolumeReclaimPolicy_value = map[string]int32{
		"PERSISTENT_VOLUME_RECLAIM_POLICY_UNSPECIFIED": 0,
		"Recycle": 1,
		"Delete":  2,
		"Retain":  3,
	}
)

func (x PersistentVolumeReclaimPolicy) Enum() *PersistentVolumeReclaimPolicy {
	p := new(PersistentVolumeReclaimPolicy)
	*p = x
	return p
}

func (x PersistentVolumeReclaimPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PersistentVolumeReclaimPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_core_v1alpha1_persistentvolume_proto_enumTypes[1].Descriptor()
}

func (PersistentVolumeReclaimPolicy) Type() protoreflect.EnumType {
	return &file_api_core_v1alpha1_persistentvolume_proto_enumTypes[1]
}

func (x PersistentVolumeReclaimPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PersistentVolumeReclaimPolicy.Descriptor instead.
func (PersistentVolumeReclaimPolicy) EnumDescriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{1}
}

// PersistentVolumeAccessMode are the ways the volume can be mounted.
type PersistentVolumeAccessMode int32

const (
	// This is only a meaningless placeholder, to avoid zero not return.
	PersistentVolumeAccessMode_PERSISTENT_VOLUME_ACCESS_MODE_UNSPECIFIED PersistentVolumeAccessMode = 0
	// ReadWriteOnce can be mounted in read/write mode to exactly 1 host.
	PersistentVolumeAccessMode_ReadWriteOnce PersistentVolumeAccessMode = 1
	// ReadOnlyMany can be mounted in read-only mode to many hosts.
	PersistentVolumeAccessMode_ReadOnlyMany PersistentVolumeAccessMode = 2
	// ReadWriteMany can be mounted in read/write mode to many hosts.
	PersistentVolumeAccessMode_ReadWriteMany PersistentVolumeAccessMode = 3
	// ReadWriteOncePod can be mounted in read/write mode to exactly 1 pod.
	// ReadWriteOncePod cannot be used in combination with other access modes.
	PersistentVolumeAccessMode_ReadWriteOncePod PersistentVolumeAccessMode = 4
)

// Enum value maps for PersistentVolumeAccessMode.
var (
	PersistentVolumeAccessMode_name = map[int32]string{
		0: "PERSISTENT_VOLUME_ACCESS_MODE_UNSPECIFIED",
		1: "ReadWriteOnce",
		2: "ReadOnlyMany",
		3: "ReadWriteMany",
		4: "ReadWriteOncePod",
	}
	PersistentVolumeAccessMode_value = map[string]int32{
		"PERSISTENT_VOLUME_ACCESS_MODE_UNSPECIFIED": 0,
		"ReadWriteOnce":    1,
		"ReadOnlyMany":     2,
		"ReadWriteMany":    3,
		"ReadWriteOncePod": 4,
	}
)

func (x PersistentVolumeAccessMode) Enum() *PersistentVolumeAccessMode {
	p := new(PersistentVolumeAccessMode)
	*p = x
	return p
}

func (x PersistentVolumeAccessMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PersistentVolumeAccessMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_core_v1alpha1_persistentvolume_proto_enumTypes[2].Descriptor()
}

func (PersistentVolumeAccessMode) Type() protoreflect.EnumType {
	return &file_api_core_v1alpha1_persistentvolume_proto_enumTypes[2]
}

func (x PersistentVolumeAccessMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PersistentVolumeAccessMode.Descriptor instead.
func (PersistentVolumeAccessMode) EnumDescriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{2}
}

type Phase int32

const (
	Phase_PHASE_UNSPECIFIED Phase = 0
	// used for PersistentVolumes that are not available
	Phase_Pending Phase = 1
	// used for PersistentVolumes that are not yet bound
	// Available volumes are held by the binder and matched to PersistentVolumeClaims
	Phase_Available Phase = 2
	// used for PersistentVolumes that are bound
	Phase_Bound Phase = 3
	// used for PersistentVolumes where the bound PersistentVolumeClaim was deleted
	// released volumes must be recycled before becoming available again
	// this phase is used by the persistent volume claim binder to signal to another process to reclaim the resource
	Phase_Released Phase = 4
	// used for PersistentVolumes that failed to be correctly recycled or deleted after being released from a claim
	Phase_Failed Phase = 5
)

// Enum value maps for Phase.
var (
	Phase_name = map[int32]string{
		0: "PHASE_UNSPECIFIED",
		1: "Pending",
		2: "Available",
		3: "Bound",
		4: "Released",
		5: "Failed",
	}
	Phase_value = map[string]int32{
		"PHASE_UNSPECIFIED": 0,
		"Pending":           1,
		"Available":         2,
		"Bound":             3,
		"Released":          4,
		"Failed":            5,
	}
)

func (x Phase) Enum() *Phase {
	p := new(Phase)
	*p = x
	return p
}

func (x Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_api_core_v1alpha1_persistentvolume_proto_enumTypes[3].Descriptor()
}

func (Phase) Type() protoreflect.EnumType {
	return &file_api_core_v1alpha1_persistentvolume_proto_enumTypes[3]
}

func (x Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Phase.Descriptor instead.
func (Phase) EnumDescriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{3}
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator.
// It is analogous to a node.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
type PersistentVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	Metadata *types.ObjectMeta `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec defines a specification of a persistent volume owned by the cluster.
	Spec *PersistentVolumeSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// PersistentVolumeClaimStatus represents the status of PV claim
	Status *PersistentVolumeStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PersistentVolume) Reset() {
	*x = PersistentVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentVolume) ProtoMessage() {}

func (x *PersistentVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentVolume.ProtoReflect.Descriptor instead.
func (*PersistentVolume) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{0}
}

func (x *PersistentVolume) GetMetadata() *types.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PersistentVolume) GetSpec() *PersistentVolumeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PersistentVolume) GetStatus() *PersistentVolumeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// PersistentVolumeSpec is the specification of a persistent volume.
type PersistentVolumeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Capacity is the description of the persistent volume's resources and capacity.
	Capacity string `protobuf:"bytes,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// AccessModes contains all ways the volume can be mounted.
	AccessModes []PersistentVolumeAccessMode `protobuf:"varint,2,rep,packed,name=access_modes,json=accessModes,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeAccessMode" json:"access_modes,omitempty"`
	// PersistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim.
	// Valid options are Retain (default for manually created PersistentVolumes), Delete (default
	// for dynamically provisioned PersistentVolumes), and Recycle (deprecated).
	// Recycle must be supported by the volume plugin underlying this PersistentVolume.
	PersistentVolumeReclaimPolicy PersistentVolumeReclaimPolicy `protobuf:"varint,3,opt,name=persistent_volume_reclaim_policy,json=persistentVolumeReclaimPolicy,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeReclaimPolicy" json:"persistent_volume_reclaim_policy,omitempty"`
	// MountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will
	// simply fail if one is invalid.
	MountOptions []string `protobuf:"bytes,4,rep,name=mount_options,json=mountOptions,proto3" json:"mount_options,omitempty"`
	// VolumeMode defines if a volume is intended to be used with a formatted filesystem
	// or to remain in raw block state. Value of Filesystem is implied when not included in spec.
	VolumeMode             PersistentVolumeMode    `protobuf:"varint,5,opt,name=volume_mode,json=volumeMode,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeMode" json:"volume_mode,omitempty"`
	PersistentVolumeSource *PersistentVolumeSource `protobuf:"bytes,6,opt,name=persistent_volume_source,json=persistentVolumeSource,proto3" json:"persistent_volume_source,omitempty"`
	StorageClassName       string                  `protobuf:"bytes,7,opt,name=storage_class_name,json=storageClassName,proto3" json:"storage_class_name,omitempty"`
}

func (x *PersistentVolumeSpec) Reset() {
	*x = PersistentVolumeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentVolumeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentVolumeSpec) ProtoMessage() {}

func (x *PersistentVolumeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentVolumeSpec.ProtoReflect.Descriptor instead.
func (*PersistentVolumeSpec) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{1}
}

func (x *PersistentVolumeSpec) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *PersistentVolumeSpec) GetAccessModes() []PersistentVolumeAccessMode {
	if x != nil {
		return x.AccessModes
	}
	return nil
}

func (x *PersistentVolumeSpec) GetPersistentVolumeReclaimPolicy() PersistentVolumeReclaimPolicy {
	if x != nil {
		return x.PersistentVolumeReclaimPolicy
	}
	return PersistentVolumeReclaimPolicy_PERSISTENT_VOLUME_RECLAIM_POLICY_UNSPECIFIED
}

func (x *PersistentVolumeSpec) GetMountOptions() []string {
	if x != nil {
		return x.MountOptions
	}
	return nil
}

func (x *PersistentVolumeSpec) GetVolumeMode() PersistentVolumeMode {
	if x != nil {
		return x.VolumeMode
	}
	return PersistentVolumeMode_PERSISTENT_VOLUME_MODE_UNSPECIFIED
}

func (x *PersistentVolumeSpec) GetPersistentVolumeSource() *PersistentVolumeSource {
	if x != nil {
		return x.PersistentVolumeSource
	}
	return nil
}

func (x *PersistentVolumeSpec) GetStorageClassName() string {
	if x != nil {
		return x.StorageClassName
	}
	return ""
}

type PersistentVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostPath *HostPathVolumeSource `protobuf:"bytes,1,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	Nfs      *NFSVolumeSource      `protobuf:"bytes,2,opt,name=nfs,proto3" json:"nfs,omitempty"`
	Local    *LocalVolumeSource    `protobuf:"bytes,3,opt,name=local,proto3" json:"local,omitempty"`
}

func (x *PersistentVolumeSource) Reset() {
	*x = PersistentVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentVolumeSource) ProtoMessage() {}

func (x *PersistentVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentVolumeSource.ProtoReflect.Descriptor instead.
func (*PersistentVolumeSource) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{2}
}

func (x *PersistentVolumeSource) GetHostPath() *HostPathVolumeSource {
	if x != nil {
		return x.HostPath
	}
	return nil
}

func (x *PersistentVolumeSource) GetNfs() *NFSVolumeSource {
	if x != nil {
		return x.Nfs
	}
	return nil
}

func (x *PersistentVolumeSource) GetLocal() *LocalVolumeSource {
	if x != nil {
		return x.Local
	}
	return nil
}

type NFSVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ReadOnly bool   `protobuf:"varint,3,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
}

func (x *NFSVolumeSource) Reset() {
	*x = NFSVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFSVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFSVolumeSource) ProtoMessage() {}

func (x *NFSVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFSVolumeSource.ProtoReflect.Descriptor instead.
func (*NFSVolumeSource) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{3}
}

func (x *NFSVolumeSource) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *NFSVolumeSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *NFSVolumeSource) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type HostPathVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *HostPathVolumeSource) Reset() {
	*x = HostPathVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostPathVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPathVolumeSource) ProtoMessage() {}

func (x *HostPathVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostPathVolumeSource.ProtoReflect.Descriptor instead.
func (*HostPathVolumeSource) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{4}
}

func (x *HostPathVolumeSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HostPathVolumeSource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type LocalVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	FsType string `protobuf:"bytes,2,opt,name=fs_type,json=fsType,proto3" json:"fs_type,omitempty"`
}

func (x *LocalVolumeSource) Reset() {
	*x = LocalVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalVolumeSource) ProtoMessage() {}

func (x *LocalVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalVolumeSource.ProtoReflect.Descriptor instead.
func (*LocalVolumeSource) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{5}
}

func (x *LocalVolumeSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LocalVolumeSource) GetFsType() string {
	if x != nil {
		return x.FsType
	}
	return ""
}

type PersistentVolumeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Phase indicates if a volume is available, bound to a claim, or released by a claim
	// +optional
	Phase Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=kantaloupe.dynamia.ai.api.core.v1alpha1.Phase" json:"phase,omitempty"`
	// A human-readable message indicating details about why the volume is in this state.
	// +optional
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI
	// +optional
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *PersistentVolumeStatus) Reset() {
	*x = PersistentVolumeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentVolumeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentVolumeStatus) ProtoMessage() {}

func (x *PersistentVolumeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentVolumeStatus.ProtoReflect.Descriptor instead.
func (*PersistentVolumeStatus) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{6}
}

func (x *PersistentVolumeStatus) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_PHASE_UNSPECIFIED
}

func (x *PersistentVolumeStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PersistentVolumeStatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Get the PersistentVolume list in the cluster.
type ListPersistentVolumesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster the PersistentVolumes belongs to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name stands for PersistentVolume name, used for fuzzy search.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Page requested.
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// Size per page requested.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// sort_option determines the cluster list order reference.
	SortOption *types.SortOption `protobuf:"bytes,5,opt,name=sort_option,json=sortOption,proto3" json:"sort_option,omitempty"`
	// LabelSelector is the format after labels.FormatLabels used to filter.
	LabelSelector string `protobuf:"bytes,6,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// FieldSelector is the format after labels.FormatLabels used to filter.
	FieldSelector string `protobuf:"bytes,7,opt,name=field_selector,json=fieldSelector,proto3" json:"field_selector,omitempty"`
	// FuzzyName is used to fuzzy search by cluster name or cluster alias name.
	FuzzyName string `protobuf:"bytes,8,opt,name=fuzzy_name,json=fuzzyName,proto3" json:"fuzzy_name,omitempty"`
}

func (x *ListPersistentVolumesRequest) Reset() {
	*x = ListPersistentVolumesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPersistentVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPersistentVolumesRequest) ProtoMessage() {}

func (x *ListPersistentVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPersistentVolumesRequest.ProtoReflect.Descriptor instead.
func (*ListPersistentVolumesRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{7}
}

func (x *ListPersistentVolumesRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ListPersistentVolumesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPersistentVolumesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPersistentVolumesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPersistentVolumesRequest) GetSortOption() *types.SortOption {
	if x != nil {
		return x.SortOption
	}
	return nil
}

func (x *ListPersistentVolumesRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *ListPersistentVolumesRequest) GetFieldSelector() string {
	if x != nil {
		return x.FieldSelector
	}
	return ""
}

func (x *ListPersistentVolumesRequest) GetFuzzyName() string {
	if x != nil {
		return x.FuzzyName
	}
	return ""
}

// ListPersistentVolumesResponse returns PersistentVolume list.
type ListPersistentVolumesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Items of PersistentVolumes.
	Items []*PersistentVolume `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Pagination returned contains current page, size, and total.
	Pagination *types.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListPersistentVolumesResponse) Reset() {
	*x = ListPersistentVolumesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPersistentVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPersistentVolumesResponse) ProtoMessage() {}

func (x *ListPersistentVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPersistentVolumesResponse.ProtoReflect.Descriptor instead.
func (*ListPersistentVolumesResponse) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{8}
}

func (x *ListPersistentVolumesResponse) GetItems() []*PersistentVolume {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListPersistentVolumesResponse) GetPagination() *types.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Get PersistentVolume in the cluster.
type GetPersistentVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster the specified persistentVolume belongs to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of the specified persistentVolume.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPersistentVolumeRequest) Reset() {
	*x = GetPersistentVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersistentVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersistentVolumeRequest) ProtoMessage() {}

func (x *GetPersistentVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersistentVolumeRequest.ProtoReflect.Descriptor instead.
func (*GetPersistentVolumeRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{9}
}

func (x *GetPersistentVolumeRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GetPersistentVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Get persistentVolume data information in json format.
type GetPersistentVolumeJSONRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster the specified persistentVolume belongs to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name represents for the persistentVolume name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPersistentVolumeJSONRequest) Reset() {
	*x = GetPersistentVolumeJSONRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersistentVolumeJSONRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersistentVolumeJSONRequest) ProtoMessage() {}

func (x *GetPersistentVolumeJSONRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersistentVolumeJSONRequest.ProtoReflect.Descriptor instead.
func (*GetPersistentVolumeJSONRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{10}
}

func (x *GetPersistentVolumeJSONRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GetPersistentVolumeJSONRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetPersistentVolumeJSONResponse returns persistentVolume data information in json format.
type GetPersistentVolumeJSONResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data is the persistentVolume YAML details.
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPersistentVolumeJSONResponse) Reset() {
	*x = GetPersistentVolumeJSONResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersistentVolumeJSONResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersistentVolumeJSONResponse) ProtoMessage() {}

func (x *GetPersistentVolumeJSONResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersistentVolumeJSONResponse.ProtoReflect.Descriptor instead.
func (*GetPersistentVolumeJSONResponse) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{11}
}

func (x *GetPersistentVolumeJSONResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetPersistentVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data is the persistentVolume YAML details.
	Data *PersistentVolume `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPersistentVolumeResponse) Reset() {
	*x = GetPersistentVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersistentVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersistentVolumeResponse) ProtoMessage() {}

func (x *GetPersistentVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersistentVolumeResponse.ProtoReflect.Descriptor instead.
func (*GetPersistentVolumeResponse) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{12}
}

func (x *GetPersistentVolumeResponse) GetData() *PersistentVolume {
	if x != nil {
		return x.Data
	}
	return nil
}

// Create PersistentVolume in the cluster.
type CreatePersistentVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster the specified persistentVolume belongs to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Data is the persistentVolume YAML details.
	Data *PersistentVolume `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreatePersistentVolumeRequest) Reset() {
	*x = CreatePersistentVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePersistentVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePersistentVolumeRequest) ProtoMessage() {}

func (x *CreatePersistentVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePersistentVolumeRequest.ProtoReflect.Descriptor instead.
func (*CreatePersistentVolumeRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{13}
}

func (x *CreatePersistentVolumeRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *CreatePersistentVolumeRequest) GetData() *PersistentVolume {
	if x != nil {
		return x.Data
	}
	return nil
}

// CreatePersistentVolumeResponse returns the created PersistentVolume data information.
type CreatePersistentVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data is the PersistentVolume YAML details.
	Data *PersistentVolume `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreatePersistentVolumeResponse) Reset() {
	*x = CreatePersistentVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePersistentVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePersistentVolumeResponse) ProtoMessage() {}

func (x *CreatePersistentVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePersistentVolumeResponse.ProtoReflect.Descriptor instead.
func (*CreatePersistentVolumeResponse) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{14}
}

func (x *CreatePersistentVolumeResponse) GetData() *PersistentVolume {
	if x != nil {
		return x.Data
	}
	return nil
}

// Update PersistentVolume in the cluster.
type UpdatePersistentVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster the specified persistentVolume belongs to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of the specified persistentVolume.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Data is the persistentVolume YAML details.
	Data *PersistentVolume `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdatePersistentVolumeRequest) Reset() {
	*x = UpdatePersistentVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePersistentVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePersistentVolumeRequest) ProtoMessage() {}

func (x *UpdatePersistentVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePersistentVolumeRequest.ProtoReflect.Descriptor instead.
func (*UpdatePersistentVolumeRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{15}
}

func (x *UpdatePersistentVolumeRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *UpdatePersistentVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePersistentVolumeRequest) GetData() *PersistentVolume {
	if x != nil {
		return x.Data
	}
	return nil
}

// UpdatePersistentVolumeResponse returns the created PersistentVolume data information.
type UpdatePersistentVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data is the PersistentVolume YAML details.
	Data *PersistentVolume `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdatePersistentVolumeResponse) Reset() {
	*x = UpdatePersistentVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePersistentVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePersistentVolumeResponse) ProtoMessage() {}

func (x *UpdatePersistentVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePersistentVolumeResponse.ProtoReflect.Descriptor instead.
func (*UpdatePersistentVolumeResponse) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{16}
}

func (x *UpdatePersistentVolumeResponse) GetData() *PersistentVolume {
	if x != nil {
		return x.Data
	}
	return nil
}

// DeletePersistentVolume deletes a PersistentVolume.
type DeletePersistentVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster represents which cluster the PersistentVolume belongs to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name represents for the PersistentVolume name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeletePersistentVolumeRequest) Reset() {
	*x = DeletePersistentVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePersistentVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePersistentVolumeRequest) ProtoMessage() {}

func (x *DeletePersistentVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_core_v1alpha1_persistentvolume_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePersistentVolumeRequest.ProtoReflect.Descriptor instead.
func (*DeletePersistentVolumeRequest) Descriptor() ([]byte, []int) {
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP(), []int{17}
}

func (x *DeletePersistentVolumeRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *DeletePersistentVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_api_core_v1alpha1_persistentvolume_proto protoreflect.FileDescriptor

var file_api_core_v1alpha1_persistentvolume_proto_rawDesc = []byte{
	0x0a, 0x28, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b,
	0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x57, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f,
	0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xda, 0x04, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x66, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x8f, 0x01, 0x0a,
	0x20, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x1d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x79, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75,
	0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x02, 0x0a,
	0x16, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x61, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x03, 0x6e, 0x66, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x46, 0x53, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x03, 0x6e, 0x66, 0x73, 0x12,
	0x50, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x22, 0x5a, 0x0a, 0x0f, 0x4e, 0x46, 0x53, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x3e, 0x0a,
	0x14, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a,
	0x11, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x90, 0x01, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x01,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70,
	0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x6c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88,
	0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x01, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x61, 0x6e, 0x74,
	0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x59, 0x0a, 0x14, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x10, 0x02, 0x2a, 0x76, 0x0a, 0x1d, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4c, 0x41,
	0x49, 0x4d, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x10, 0x03, 0x2a, 0x99, 0x01, 0x0a,
	0x1a, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x50,
	0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65,
	0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x6e, 0x63, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x4d, 0x61, 0x6e, 0x79, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f,
	0x6e, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x10, 0x04, 0x2a, 0x5f, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x61, 0x2d,
	0x61, 0x69, 0x2f, 0x6b, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x75, 0x70, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_core_v1alpha1_persistentvolume_proto_rawDescOnce sync.Once
	file_api_core_v1alpha1_persistentvolume_proto_rawDescData = file_api_core_v1alpha1_persistentvolume_proto_rawDesc
)

func file_api_core_v1alpha1_persistentvolume_proto_rawDescGZIP() []byte {
	file_api_core_v1alpha1_persistentvolume_proto_rawDescOnce.Do(func() {
		file_api_core_v1alpha1_persistentvolume_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_core_v1alpha1_persistentvolume_proto_rawDescData)
	})
	return file_api_core_v1alpha1_persistentvolume_proto_rawDescData
}

var file_api_core_v1alpha1_persistentvolume_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_core_v1alpha1_persistentvolume_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_api_core_v1alpha1_persistentvolume_proto_goTypes = []interface{}{
	(PersistentVolumeMode)(0),               // 0: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeMode
	(PersistentVolumeReclaimPolicy)(0),      // 1: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeReclaimPolicy
	(PersistentVolumeAccessMode)(0),         // 2: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeAccessMode
	(Phase)(0),                              // 3: kantaloupe.dynamia.ai.api.core.v1alpha1.Phase
	(*PersistentVolume)(nil),                // 4: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolume
	(*PersistentVolumeSpec)(nil),            // 5: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeSpec
	(*PersistentVolumeSource)(nil),          // 6: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeSource
	(*NFSVolumeSource)(nil),                 // 7: kantaloupe.dynamia.ai.api.core.v1alpha1.NFSVolumeSource
	(*HostPathVolumeSource)(nil),            // 8: kantaloupe.dynamia.ai.api.core.v1alpha1.HostPathVolumeSource
	(*LocalVolumeSource)(nil),               // 9: kantaloupe.dynamia.ai.api.core.v1alpha1.LocalVolumeSource
	(*PersistentVolumeStatus)(nil),          // 10: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeStatus
	(*ListPersistentVolumesRequest)(nil),    // 11: kantaloupe.dynamia.ai.api.core.v1alpha1.ListPersistentVolumesRequest
	(*ListPersistentVolumesResponse)(nil),   // 12: kantaloupe.dynamia.ai.api.core.v1alpha1.ListPersistentVolumesResponse
	(*GetPersistentVolumeRequest)(nil),      // 13: kantaloupe.dynamia.ai.api.core.v1alpha1.GetPersistentVolumeRequest
	(*GetPersistentVolumeJSONRequest)(nil),  // 14: kantaloupe.dynamia.ai.api.core.v1alpha1.GetPersistentVolumeJSONRequest
	(*GetPersistentVolumeJSONResponse)(nil), // 15: kantaloupe.dynamia.ai.api.core.v1alpha1.GetPersistentVolumeJSONResponse
	(*GetPersistentVolumeResponse)(nil),     // 16: kantaloupe.dynamia.ai.api.core.v1alpha1.GetPersistentVolumeResponse
	(*CreatePersistentVolumeRequest)(nil),   // 17: kantaloupe.dynamia.ai.api.core.v1alpha1.CreatePersistentVolumeRequest
	(*CreatePersistentVolumeResponse)(nil),  // 18: kantaloupe.dynamia.ai.api.core.v1alpha1.CreatePersistentVolumeResponse
	(*UpdatePersistentVolumeRequest)(nil),   // 19: kantaloupe.dynamia.ai.api.core.v1alpha1.UpdatePersistentVolumeRequest
	(*UpdatePersistentVolumeResponse)(nil),  // 20: kantaloupe.dynamia.ai.api.core.v1alpha1.UpdatePersistentVolumeResponse
	(*DeletePersistentVolumeRequest)(nil),   // 21: kantaloupe.dynamia.ai.api.core.v1alpha1.DeletePersistentVolumeRequest
	(*types.ObjectMeta)(nil),                // 22: kantaloupe.dynamia.ai.api.types.ObjectMeta
	(*types.SortOption)(nil),                // 23: kantaloupe.dynamia.ai.api.types.SortOption
	(*types.Pagination)(nil),                // 24: kantaloupe.dynamia.ai.api.types.Pagination
}
var file_api_core_v1alpha1_persistentvolume_proto_depIdxs = []int32{
	22, // 0: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolume.metadata:type_name -> kantaloupe.dynamia.ai.api.types.ObjectMeta
	5,  // 1: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolume.spec:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeSpec
	10, // 2: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolume.status:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeStatus
	2,  // 3: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeSpec.access_modes:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeAccessMode
	1,  // 4: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeSpec.persistent_volume_reclaim_policy:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeReclaimPolicy
	0,  // 5: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeSpec.volume_mode:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeMode
	6,  // 6: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeSpec.persistent_volume_source:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeSource
	8,  // 7: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeSource.host_path:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.HostPathVolumeSource
	7,  // 8: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeSource.nfs:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.NFSVolumeSource
	9,  // 9: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeSource.local:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.LocalVolumeSource
	3,  // 10: kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolumeStatus.phase:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.Phase
	23, // 11: kantaloupe.dynamia.ai.api.core.v1alpha1.ListPersistentVolumesRequest.sort_option:type_name -> kantaloupe.dynamia.ai.api.types.SortOption
	4,  // 12: kantaloupe.dynamia.ai.api.core.v1alpha1.ListPersistentVolumesResponse.items:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolume
	24, // 13: kantaloupe.dynamia.ai.api.core.v1alpha1.ListPersistentVolumesResponse.pagination:type_name -> kantaloupe.dynamia.ai.api.types.Pagination
	4,  // 14: kantaloupe.dynamia.ai.api.core.v1alpha1.GetPersistentVolumeResponse.data:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolume
	4,  // 15: kantaloupe.dynamia.ai.api.core.v1alpha1.CreatePersistentVolumeRequest.data:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolume
	4,  // 16: kantaloupe.dynamia.ai.api.core.v1alpha1.CreatePersistentVolumeResponse.data:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolume
	4,  // 17: kantaloupe.dynamia.ai.api.core.v1alpha1.UpdatePersistentVolumeRequest.data:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolume
	4,  // 18: kantaloupe.dynamia.ai.api.core.v1alpha1.UpdatePersistentVolumeResponse.data:type_name -> kantaloupe.dynamia.ai.api.core.v1alpha1.PersistentVolume
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_api_core_v1alpha1_persistentvolume_proto_init() }
func file_api_core_v1alpha1_persistentvolume_proto_init() {
	if File_api_core_v1alpha1_persistentvolume_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentVolumeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFSVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostPathVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentVolumeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPersistentVolumesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPersistentVolumesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersistentVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersistentVolumeJSONRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersistentVolumeJSONResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersistentVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePersistentVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePersistentVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePersistentVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePersistentVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_core_v1alpha1_persistentvolume_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePersistentVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_core_v1alpha1_persistentvolume_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_core_v1alpha1_persistentvolume_proto_goTypes,
		DependencyIndexes: file_api_core_v1alpha1_persistentvolume_proto_depIdxs,
		EnumInfos:         file_api_core_v1alpha1_persistentvolume_proto_enumTypes,
		MessageInfos:      file_api_core_v1alpha1_persistentvolume_proto_msgTypes,
	}.Build()
	File_api_core_v1alpha1_persistentvolume_proto = out.File
	file_api_core_v1alpha1_persistentvolume_proto_rawDesc = nil
	file_api_core_v1alpha1_persistentvolume_proto_goTypes = nil
	file_api_core_v1alpha1_persistentvolume_proto_depIdxs = nil
}
